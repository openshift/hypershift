AWSTemplateFormatVersion: 2010-09-09
Description: Template for HyperShift Cluster Security Elements (Security Groups & IAM)

Parameters:
  InfrastructureName:
    AllowedPattern: ^([a-zA-Z][a-zA-Z0-9\-]{0,26})$
    MaxLength: 27
    MinLength: 1
    ConstraintDescription: Infrastructure name must be alphanumeric, start with a letter, and have a maximum of 27 characters.
    Description: A short, unique cluster ID used to tag cloud resources and identify items owned or used by the cluster.
    Type: String
  BaseDomainHostedZoneId:
    Description: The Route53 public zone ID which is the parent public zone for the cluster, such as Z21IXYZABCZ2A4.
    Type: String
  Subdomain:
    Description: The Route53 delegated zone for the cluster, such as hypershift.example.com. Omit the trailing period.
    Type: String
    Default: "hypershift.example.com"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "Cluster Information"
      Parameters:
      - InfrastructureName
    ParameterLabels:
      InfrastructureName:
        default: "Infrastructure Name"

# TODO: See if this can be removed through AmazonProvidedDNS defaulting
Mappings:
  RegionMap:
    us-east-1:
      DHCPDomainName: "ec2.internal"
    us-east-2:
      DHCPDomainName: "us-east-2..compute.internal"
    us-west-1:
      DHCPDomainName: "us-west-1.compute.internal"
    us-west-2:
      DHCPDomainName: "us-west-2.compute.internal"

Resources:
  OIDCBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref InfrastructureName
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "oidc"]]

  OIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "oidc"]]
      ClientIdList:
      - openshift
      ThumbprintList:
      - "A9D53002E97E00E043244F3D170D6F4C414104FD"
      # TODO: Can't seem to reference the bucket BucketName property...
      Url: !Join ["", ["https://s3.", !Ref "AWS::Region", ".amazonaws.com/", !Ref InfrastructureName]]

  OIDCIngressRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["", [!Ref InfrastructureName, "-openshift-ingress"]]
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "oidc-ingress"]]
      AssumeRolePolicyDocument:
        Fn::Sub:
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "${Principal}"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "${URL}": "openshift"
                  }
                }
              }
            ]
          }
        - Principal: !Ref OIDCProvider
          # TODO: Assumes the name of the bucket
          URL: !Join ["", ["s3.", !Ref "AWS::Region", ".amazonaws.com/", !Ref InfrastructureName, ":aud"]]
      Policies:
      - PolicyName: !Join ["", [!Ref InfrastructureName, "-openshift-ingress"]]
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "elasticloadbalancing:DescribeLoadBalancers"
            - "route53:ListHostedZones"
            - "route53:ChangeResourceRecordSets"
            - "tag:GetResources"
            Resource: "*"

  OIDCImageRegistryRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["", [!Ref InfrastructureName, "-openshift-image-registry"]]
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "oidc-registry"]]
      AssumeRolePolicyDocument:
        Fn::Sub:
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "${Principal}"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "${URL}": "openshift"
                  }
                }
              }
            ]
          }
        - Principal: !Ref OIDCProvider
          # TODO: Assumes the name of the bucket
          URL: !Join ["", ["s3.", !Ref "AWS::Region", ".amazonaws.com/", !Ref InfrastructureName, ":aud"]]
      Policies:
      - PolicyName: !Join ["", [!Ref InfrastructureName, "-openshift-image-registry"]]
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "s3:CreateBucket"
            - "s3:DeleteBucket"
            - "s3:PutBucketTagging"
            - "s3:GetBucketTagging"
            - "s3:PutBucketPublicAccessBlock"
            - "s3:GetBucketPublicAccessBlock"
            - "s3:PutEncryptionConfiguration"
            - "s3:GetEncryptionConfiguration"
            - "s3:PutLifecycleConfiguration"
            - "s3:GetLifecycleConfiguration"
            - "s3:GetBucketLocation"
            - "s3:ListBucket"
            - "s3:GetObject"
            - "s3:PutObject"
            - "s3:DeleteObject"
            - "s3:ListBucketMultipartUploads"
            - "s3:AbortMultipartUpload"
            - "s3:ListMultipartUploadParts"
            Resource: "*"

  OIDCCSIDriverRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["", [!Ref InfrastructureName, "-csi-driver"]]
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "oidc-csi"]]
      AssumeRolePolicyDocument:
        Fn::Sub:
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "${Principal}"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "${URL}": "openshift"
                  }
                }
              }
            ]
          }
        - Principal: !Ref OIDCProvider
          # TODO: Assumes the name of the bucket
          URL: !Join ["", ["s3.", !Ref "AWS::Region", ".amazonaws.com/", !Ref InfrastructureName, ":aud"]]
      Policies:
      - PolicyName: !Join ["", [!Ref InfrastructureName, "-csi-driver"]]
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "ec2:AttachVolume"
            - "ec2:CreateSnapshot"
            - "ec2:CreateTags"
            - "ec2:CreateVolume"
            - "ec2:DeleteSnapshot"
            - "ec2:DeleteTags"
            - "ec2:DeleteVolume"
            - "ec2:DescribeInstances"
            - "ec2:DescribeSnapshots"
            - "ec2:DescribeTags"
            - "ec2:DescribeVolumes"
            - "ec2:DescribeVolumesModifications"
            - "ec2:DetachVolume"
            - "ec2:ModifyVolume"
            Resource: "*"

  WorkerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["", [!Ref InfrastructureName, "-worker"]]
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "worker"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "ec2.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
      - PolicyName: !Join ["", [!Ref InfrastructureName, "-worker"]]
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "ec2:DescribeInstances"
            - "ec2:DescribeRegions"
            Resource: "*"

  WorkerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Join ["-", [!Ref InfrastructureName, "worker"]]
      Roles:
      - Ref: "WorkerRole"

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: "10.0.0.0/16"
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "vpc"]]

  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !FindInMap
      - RegionMap
      - !Ref "AWS::Region"
      - DHCPDomainName
      DomainNameServers:
      - AmazonProvidedDNS
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "dhcp"]]

  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref DHCPOptions
      VpcId: !Ref VPC

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "private"]]
      VpcId: !Ref VPC
      AvailabilityZone: !Select
      - 0
      - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: "10.0.128.0/20"

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "public"]]
      VpcId: !Ref VPC
      AvailabilityZone: !Select
      - 0
      - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: "10.0.0.0/20"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "igw"]]

  VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "eip"]]

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [ !Ref InfrastructureName, "nat"]]

  WorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "worker"]]
      VpcId: !Ref VPC
      GroupDescription: "Worker security group"
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - IpProtocol: "50"
      - IpProtocol: icmp
        CidrIp: "10.0.0.0/16"
        FromPort: "-1"
        ToPort: "-1"
      - IpProtocol: tcp
        CidrIp: "10.0.0.0/16"
        FromPort: 22
        ToPort: 22
      - IpProtocol: udp
        FromPort: 6081
        ToPort: 6081
      - IpProtocol: udp
        FromPort: 500
        ToPort: 500
      - IpProtocol: udp
        FromPort: 4500
        ToPort: 4500
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9999
      - IpProtocol: udp
        FromPort: 9000
        ToPort: 9999
      - IpProtocol: tcp
        FromPort: 10250
        ToPort: 10250
      - IpProtocol: tcp
        FromPort: 30000
        ToPort: 32767
      - IpProtocol: udp
        FromPort: 30000
        ToPort: 32767

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "private"]]
      VpcId: !Ref VPC

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  PrivateNATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NATGateway
      DestinationCidrBlock: "0.0.0.0/0"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "public"]]
      VpcId: !Ref VPC

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PublicNATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: "0.0.0.0/0"

  VPCS3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Join ["", ["com.amazonaws.", !Ref "AWS::Region", ".s3"]]
      RouteTableIds:
      - !Ref PublicRouteTable
      - !Ref PrivateRouteTable

  SubdomainPrivateZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneTags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [ !Ref InfrastructureName, "private"]]
      Name: !Ref Subdomain
      VPCs:
      - VPCId: !Ref VPC
        VPCRegion: !Ref "AWS::Region"

  SubdomainPublicZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneTags:
      - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
        Value: "owned"
      - Key: Name
        Value: !Join ["-", [!Ref InfrastructureName, "public"]]
      Name: !Ref Subdomain

Outputs:
  Region:
    Value: !Ref "AWS::Region"
  Zone:
    Value: !Select
    - 0
    - Fn::GetAZs: !Ref "AWS::Region"
  BaseDomainHostedZoneId:
    Value: !Ref BaseDomainHostedZoneId
  Subdomain:
    Value: !Ref Subdomain
  SubdomainPrivateZoneId:
    Description: Hosted zone ID for the private DNS, which is required for private records.
    Value: !Ref SubdomainPrivateZone
  SubdomainPublicZoneId:
    Description: Hosted zone ID for the public DNS
    Value: !Ref SubdomainPublicZone
  SubdomainPublicZoneNameServers:
    Value: !Join [",", !GetAtt SubdomainPublicZone.NameServers]
  VPCId:
    Value: !Ref VPC
  ComputeCIDR:
    Value: !GetAtt VPC.CidrBlock
  PrivateSubnetId:
    Value: !Ref PrivateSubnet
  PublicSubnetId:
    Value: !Ref PublicSubnet
  WorkerSecurityGroupId:
    Value: !Ref WorkerSecurityGroup
  WorkerInstanceProfileId:
    Value: !Ref WorkerInstanceProfile
  OIDCIngressRoleArn:
    Value: !GetAtt OIDCIngressRole.Arn
  OIDCImageRegistryRoleArn:
    Value: !GetAtt OIDCImageRegistryRole.Arn
  OIDCCSIDriverRoleArn:
    Value: !GetAtt OIDCCSIDriverRole.Arn
  # TODO: This is hard-coded to match OIDCProvider.Url, is there a better way?
  OIDCIssuerURL:
    Value: !Join ["", ["https://s3.", !Ref "AWS::Region", ".amazonaws.com/", !Ref InfrastructureName]]
  OIDCBucketName:
    Value: !Ref OIDCBucket
