
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.5.0
  creationTimestamp: null
  name: hostedclusters.hypershift.openshift.io
spec:
  group: hypershift.openshift.io
  names:
    kind: HostedCluster
    listKind: HostedClusterList
    plural: hostedclusters
    shortNames:
    - hc
    - hcs
    singular: hostedcluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Version
      jsonPath: .status.version.history[?(@.state=="Completed")].version
      name: Version
      type: string
    - description: Ready
      jsonPath: .status.ready
      name: Ready
      type: string
    - description: KubeConfig Secret
      jsonPath: .status.kubeconfig.name
      name: KubeConfig
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: HostedCluster is the Schema for the hostedclusters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: HostedClusterSpec defines the desired state of HostedCluster
            properties:
              controlPlaneServiceType:
                type: string
              controlPlaneServiceTypeNodePortAddress:
                type: string
              infraID:
                description: InfraID is used to identify the cluster in cloud platforms
                type: string
              initialComputeReplicas:
                type: integer
              networking:
                description: Networking contains network-specific settings for this cluster
                properties:
                  machineCIDR:
                    type: string
                  podCIDR:
                    type: string
                  serviceCIDR:
                    type: string
                required:
                - machineCIDR
                - podCIDR
                - serviceCIDR
                type: object
              platform:
                properties:
                  aws:
                    description: AWS contains AWS-specific settings for the HostedCluster
                    properties:
                      nodePoolDefaults:
                        description: NodePoolDefaults specifies the default platform
                        properties:
                          ami:
                            description: AMI is the image id to use
                            type: string
                          instanceProfile:
                            type: string
                          instanceType:
                            description: InstanceType defines the ec2 instance type. eg. m4-large
                            type: string
                          securityGroups:
                            description: SecurityGroups is the set of security groups to associate with nodepool machines
                            items:
                              description: AWSResourceReference is a reference to a specific AWS resource by ID, ARN, or filters. Only one of ID, ARN or Filters may be specified. Specifying more than one will result in a validation error.
                              properties:
                                arn:
                                  description: ARN of resource
                                  type: string
                                filters:
                                  description: 'Filters is a set of key/value pairs used to identify a resource They are applied according to the rules defined by the AWS API: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Filtering.html'
                                  items:
                                    description: Filter is a filter used to identify an AWS resource
                                    properties:
                                      name:
                                        description: Name of the filter. Filter names are case-sensitive.
                                        type: string
                                      values:
                                        description: Values includes one or more filter values. Filter values are case-sensitive.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - name
                                    - values
                                    type: object
                                  type: array
                                id:
                                  description: ID of resource
                                  type: string
                              type: object
                            type: array
                          subnet:
                            description: Subnet is the subnet to use for instances
                            properties:
                              arn:
                                description: ARN of resource
                                type: string
                              filters:
                                description: 'Filters is a set of key/value pairs used to identify a resource They are applied according to the rules defined by the AWS API: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Filtering.html'
                                items:
                                  description: Filter is a filter used to identify an AWS resource
                                  properties:
                                    name:
                                      description: Name of the filter. Filter names are case-sensitive.
                                      type: string
                                    values:
                                      description: Values includes one or more filter values. Filter values are case-sensitive.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - name
                                  - values
                                  type: object
                                type: array
                              id:
                                description: ID of resource
                                type: string
                            type: object
                          zone:
                            description: Zone is the availability zone where the instances are created
                            type: string
                        required:
                        - instanceType
                        type: object
                      region:
                        description: Region is the AWS region for the cluster
                        type: string
                      serviceEndpoints:
                        description: ServiceEndpoints list contains custom endpoints which will override default service endpoint of AWS Services. There must be only one ServiceEndpoint for a service.
                        items:
                          description: AWSServiceEndpoint stores the configuration for services to override existing defaults of AWS Services.
                          properties:
                            name:
                              description: Name is the name of the AWS service. This must be provided and cannot be empty.
                              type: string
                            url:
                              description: URL is fully qualified URI with scheme https, that overrides the default generated endpoint for a client. This must be provided and cannot be empty.
                              pattern: ^https://
                              type: string
                          required:
                          - name
                          - url
                          type: object
                        type: array
                      vpc:
                        description: VPC specifies the VPC used for the cluster
                        type: string
                    required:
                    - region
                    - vpc
                    type: object
                type: object
              providerCreds:
                description: ProviderCreds is a reference to a secret containing cloud account info
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              pullSecret:
                description: PullSecret is a pull secret injected into the container runtime of guest workers. It should have an ".dockerconfigjson" key containing the pull secret JSON.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              release:
                description: Release specifies the release image to use for this HostedCluster
                properties:
                  image:
                    description: Image is the release image pullspec for the control plane
                    type: string
                required:
                - image
                type: object
              sshKey:
                description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
            required:
            - initialComputeReplicas
            - networking
            - platform
            - providerCreds
            - pullSecret
            - release
            - sshKey
            type: object
          status:
            description: HostedClusterStatus defines the observed state of HostedCluster
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              kubeconfig:
                description: KubeConfig is a reference to the secret containing the default kubeconfig for the cluster.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              ready:
                type: boolean
              version:
                description: Version is the status of the release version applied to the HostedCluster.
                properties:
                  desired:
                    description: desired is the version that the cluster is reconciling towards. If the cluster is not yet fully initialized desired will be set with the information available, which may be an image or a tag.
                    properties:
                      image:
                        description: Image is the release image pullspec for the control plane
                        type: string
                    required:
                    - image
                    type: object
                  history:
                    description: history contains a list of the most recent versions applied to the cluster. This value may be empty during cluster startup, and then will be updated when a new update is being applied. The newest update is first in the list and it is ordered by recency. Updates in the history have state Completed if the rollout completed - if an update was failing or halfway applied the state will be Partial. Only a limited amount of update history is preserved.
                    items:
                      description: UpdateHistory is a single attempted update to the cluster.
                      properties:
                        completionTime:
                          description: completionTime, if set, is when the update was fully applied. The update that is currently being applied will have a null completion time. Completion time will always be set for entries that are not the current update (usually to the started time of the next update).
                          format: date-time
                          nullable: true
                          type: string
                        image:
                          description: image is a container image location that contains the update. This value is always populated.
                          type: string
                        startedTime:
                          description: startedTime is the time at which the update was started.
                          format: date-time
                          type: string
                        state:
                          description: state reflects whether the update was fully applied. The Partial state indicates the update is not fully applied, while the Completed state indicates the update was successfully rolled out at least once (all parts of the update successfully applied).
                          type: string
                        verified:
                          description: verified indicates whether the provided update was properly verified before it was installed. If this is false the cluster may not be trusted.
                          type: boolean
                        version:
                          description: version is a semantic versioning identifying the update version. If the requested image does not define a version, or if a failure occurs retrieving the image, this value may be empty.
                          type: string
                      required:
                      - completionTime
                      - image
                      - startedTime
                      - state
                      - verified
                      type: object
                    type: array
                  observedGeneration:
                    description: observedGeneration reports which version of the spec is being synced. If this value is not equal to metadata.generation, then the desired and conditions fields may represent a previous version.
                    format: int64
                    type: integer
                required:
                - desired
                - observedGeneration
                type: object
            required:
            - conditions
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
