/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	karpenterv1beta1 "github.com/openshift/hypershift/api/karpenter/v1beta1"
)

// OpenshiftEC2NodeClassSpecApplyConfiguration represents an declarative configuration of the OpenshiftEC2NodeClassSpec type for use
// with apply.
type OpenshiftEC2NodeClassSpecApplyConfiguration struct {
	SubnetSelectorTerms        []SubnetSelectorTermApplyConfiguration        `json:"subnetSelectorTerms,omitempty"`
	SecurityGroupSelectorTerms []SecurityGroupSelectorTermApplyConfiguration `json:"securityGroupSelectorTerms,omitempty"`
	AssociatePublicIPAddress   *bool                                         `json:"associatePublicIPAddress,omitempty"`
	Tags                       map[string]string                             `json:"tags,omitempty"`
	BlockDeviceMappings        []*karpenterv1beta1.BlockDeviceMapping        `json:"blockDeviceMappings,omitempty"`
	InstanceStorePolicy        *karpenterv1beta1.InstanceStorePolicy         `json:"instanceStorePolicy,omitempty"`
	DetailedMonitoring         *bool                                         `json:"detailedMonitoring,omitempty"`
}

// OpenshiftEC2NodeClassSpecApplyConfiguration constructs an declarative configuration of the OpenshiftEC2NodeClassSpec type for use with
// apply.
func OpenshiftEC2NodeClassSpec() *OpenshiftEC2NodeClassSpecApplyConfiguration {
	return &OpenshiftEC2NodeClassSpecApplyConfiguration{}
}

// WithSubnetSelectorTerms adds the given value to the SubnetSelectorTerms field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SubnetSelectorTerms field.
func (b *OpenshiftEC2NodeClassSpecApplyConfiguration) WithSubnetSelectorTerms(values ...*SubnetSelectorTermApplyConfiguration) *OpenshiftEC2NodeClassSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSubnetSelectorTerms")
		}
		b.SubnetSelectorTerms = append(b.SubnetSelectorTerms, *values[i])
	}
	return b
}

// WithSecurityGroupSelectorTerms adds the given value to the SecurityGroupSelectorTerms field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SecurityGroupSelectorTerms field.
func (b *OpenshiftEC2NodeClassSpecApplyConfiguration) WithSecurityGroupSelectorTerms(values ...*SecurityGroupSelectorTermApplyConfiguration) *OpenshiftEC2NodeClassSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSecurityGroupSelectorTerms")
		}
		b.SecurityGroupSelectorTerms = append(b.SecurityGroupSelectorTerms, *values[i])
	}
	return b
}

// WithAssociatePublicIPAddress sets the AssociatePublicIPAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AssociatePublicIPAddress field is set to the value of the last call.
func (b *OpenshiftEC2NodeClassSpecApplyConfiguration) WithAssociatePublicIPAddress(value bool) *OpenshiftEC2NodeClassSpecApplyConfiguration {
	b.AssociatePublicIPAddress = &value
	return b
}

// WithTags puts the entries into the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Tags field,
// overwriting an existing map entries in Tags field with the same key.
func (b *OpenshiftEC2NodeClassSpecApplyConfiguration) WithTags(entries map[string]string) *OpenshiftEC2NodeClassSpecApplyConfiguration {
	if b.Tags == nil && len(entries) > 0 {
		b.Tags = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Tags[k] = v
	}
	return b
}

// WithBlockDeviceMappings adds the given value to the BlockDeviceMappings field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the BlockDeviceMappings field.
func (b *OpenshiftEC2NodeClassSpecApplyConfiguration) WithBlockDeviceMappings(values ...**karpenterv1beta1.BlockDeviceMapping) *OpenshiftEC2NodeClassSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithBlockDeviceMappings")
		}
		b.BlockDeviceMappings = append(b.BlockDeviceMappings, *values[i])
	}
	return b
}

// WithInstanceStorePolicy sets the InstanceStorePolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstanceStorePolicy field is set to the value of the last call.
func (b *OpenshiftEC2NodeClassSpecApplyConfiguration) WithInstanceStorePolicy(value karpenterv1beta1.InstanceStorePolicy) *OpenshiftEC2NodeClassSpecApplyConfiguration {
	b.InstanceStorePolicy = &value
	return b
}

// WithDetailedMonitoring sets the DetailedMonitoring field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DetailedMonitoring field is set to the value of the last call.
func (b *OpenshiftEC2NodeClassSpecApplyConfiguration) WithDetailedMonitoring(value bool) *OpenshiftEC2NodeClassSpecApplyConfiguration {
	b.DetailedMonitoring = &value
	return b
}
