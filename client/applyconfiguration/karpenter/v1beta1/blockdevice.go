/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// BlockDeviceApplyConfiguration represents an declarative configuration of the BlockDevice type for use
// with apply.
type BlockDeviceApplyConfiguration struct {
	DeleteOnTermination *bool              `json:"deleteOnTermination,omitempty"`
	Encrypted           *bool              `json:"encrypted,omitempty"`
	IOPS                *int64             `json:"iops,omitempty"`
	KMSKeyID            *string            `json:"kmsKeyID,omitempty"`
	SnapshotID          *string            `json:"snapshotID,omitempty"`
	Throughput          *int64             `json:"throughput,omitempty"`
	VolumeSize          *resource.Quantity `json:"volumeSize,omitempty"`
	VolumeType          *string            `json:"volumeType,omitempty"`
}

// BlockDeviceApplyConfiguration constructs an declarative configuration of the BlockDevice type for use with
// apply.
func BlockDevice() *BlockDeviceApplyConfiguration {
	return &BlockDeviceApplyConfiguration{}
}

// WithDeleteOnTermination sets the DeleteOnTermination field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeleteOnTermination field is set to the value of the last call.
func (b *BlockDeviceApplyConfiguration) WithDeleteOnTermination(value bool) *BlockDeviceApplyConfiguration {
	b.DeleteOnTermination = &value
	return b
}

// WithEncrypted sets the Encrypted field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Encrypted field is set to the value of the last call.
func (b *BlockDeviceApplyConfiguration) WithEncrypted(value bool) *BlockDeviceApplyConfiguration {
	b.Encrypted = &value
	return b
}

// WithIOPS sets the IOPS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IOPS field is set to the value of the last call.
func (b *BlockDeviceApplyConfiguration) WithIOPS(value int64) *BlockDeviceApplyConfiguration {
	b.IOPS = &value
	return b
}

// WithKMSKeyID sets the KMSKeyID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KMSKeyID field is set to the value of the last call.
func (b *BlockDeviceApplyConfiguration) WithKMSKeyID(value string) *BlockDeviceApplyConfiguration {
	b.KMSKeyID = &value
	return b
}

// WithSnapshotID sets the SnapshotID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SnapshotID field is set to the value of the last call.
func (b *BlockDeviceApplyConfiguration) WithSnapshotID(value string) *BlockDeviceApplyConfiguration {
	b.SnapshotID = &value
	return b
}

// WithThroughput sets the Throughput field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Throughput field is set to the value of the last call.
func (b *BlockDeviceApplyConfiguration) WithThroughput(value int64) *BlockDeviceApplyConfiguration {
	b.Throughput = &value
	return b
}

// WithVolumeSize sets the VolumeSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeSize field is set to the value of the last call.
func (b *BlockDeviceApplyConfiguration) WithVolumeSize(value resource.Quantity) *BlockDeviceApplyConfiguration {
	b.VolumeSize = &value
	return b
}

// WithVolumeType sets the VolumeType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeType field is set to the value of the last call.
func (b *BlockDeviceApplyConfiguration) WithVolumeType(value string) *BlockDeviceApplyConfiguration {
	b.VolumeType = &value
	return b
}
