/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// ClusterSizingConfigurationSpecApplyConfiguration represents an declarative configuration of the ClusterSizingConfigurationSpec type for use
// with apply.
type ClusterSizingConfigurationSpecApplyConfiguration struct {
	Sizes                               []SizeConfigurationApplyConfiguration           `json:"sizes,omitempty"`
	Concurrency                         *ConcurrencyConfigurationApplyConfiguration     `json:"concurrency,omitempty"`
	TransitionDelay                     *TransitionDelayConfigurationApplyConfiguration `json:"transitionDelay,omitempty"`
	NonRequestServingNodesBufferPerZone *resource.Quantity                              `json:"nonRequestServingNodesBufferPerZone,omitempty"`
}

// ClusterSizingConfigurationSpecApplyConfiguration constructs an declarative configuration of the ClusterSizingConfigurationSpec type for use with
// apply.
func ClusterSizingConfigurationSpec() *ClusterSizingConfigurationSpecApplyConfiguration {
	return &ClusterSizingConfigurationSpecApplyConfiguration{}
}

// WithSizes adds the given value to the Sizes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Sizes field.
func (b *ClusterSizingConfigurationSpecApplyConfiguration) WithSizes(values ...*SizeConfigurationApplyConfiguration) *ClusterSizingConfigurationSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSizes")
		}
		b.Sizes = append(b.Sizes, *values[i])
	}
	return b
}

// WithConcurrency sets the Concurrency field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Concurrency field is set to the value of the last call.
func (b *ClusterSizingConfigurationSpecApplyConfiguration) WithConcurrency(value *ConcurrencyConfigurationApplyConfiguration) *ClusterSizingConfigurationSpecApplyConfiguration {
	b.Concurrency = value
	return b
}

// WithTransitionDelay sets the TransitionDelay field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TransitionDelay field is set to the value of the last call.
func (b *ClusterSizingConfigurationSpecApplyConfiguration) WithTransitionDelay(value *TransitionDelayConfigurationApplyConfiguration) *ClusterSizingConfigurationSpecApplyConfiguration {
	b.TransitionDelay = value
	return b
}

// WithNonRequestServingNodesBufferPerZone sets the NonRequestServingNodesBufferPerZone field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NonRequestServingNodesBufferPerZone field is set to the value of the last call.
func (b *ClusterSizingConfigurationSpecApplyConfiguration) WithNonRequestServingNodesBufferPerZone(value resource.Quantity) *ClusterSizingConfigurationSpecApplyConfiguration {
	b.NonRequestServingNodesBufferPerZone = &value
	return b
}
