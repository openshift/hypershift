/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	hypershiftv1beta1 "github.com/openshift/hypershift/api/hypershift/v1beta1"
)

// PortSpecApplyConfiguration represents an declarative configuration of the PortSpec type for use
// with apply.
type PortSpecApplyConfiguration struct {
	Network             *NetworkParamApplyConfiguration       `json:"network,omitempty"`
	Description         *string                               `json:"description,omitempty"`
	AllowedAddressPairs []AddressPairApplyConfiguration       `json:"allowedAddressPairs,omitempty"`
	VNICType            *string                               `json:"vnicType,omitempty"`
	PortSecurityPolicy  *hypershiftv1beta1.PortSecurityPolicy `json:"portSecurityPolicy,omitempty"`
}

// PortSpecApplyConfiguration constructs an declarative configuration of the PortSpec type for use with
// apply.
func PortSpec() *PortSpecApplyConfiguration {
	return &PortSpecApplyConfiguration{}
}

// WithNetwork sets the Network field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Network field is set to the value of the last call.
func (b *PortSpecApplyConfiguration) WithNetwork(value *NetworkParamApplyConfiguration) *PortSpecApplyConfiguration {
	b.Network = value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *PortSpecApplyConfiguration) WithDescription(value string) *PortSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithAllowedAddressPairs adds the given value to the AllowedAddressPairs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AllowedAddressPairs field.
func (b *PortSpecApplyConfiguration) WithAllowedAddressPairs(values ...*AddressPairApplyConfiguration) *PortSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAllowedAddressPairs")
		}
		b.AllowedAddressPairs = append(b.AllowedAddressPairs, *values[i])
	}
	return b
}

// WithVNICType sets the VNICType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VNICType field is set to the value of the last call.
func (b *PortSpecApplyConfiguration) WithVNICType(value string) *PortSpecApplyConfiguration {
	b.VNICType = &value
	return b
}

// WithPortSecurityPolicy sets the PortSecurityPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PortSecurityPolicy field is set to the value of the last call.
func (b *PortSpecApplyConfiguration) WithPortSecurityPolicy(value hypershiftv1beta1.PortSecurityPolicy) *PortSpecApplyConfiguration {
	b.PortSecurityPolicy = &value
	return b
}
