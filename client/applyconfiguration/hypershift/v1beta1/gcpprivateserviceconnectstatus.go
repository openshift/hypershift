/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// GCPPrivateServiceConnectStatusApplyConfiguration represents a declarative configuration of the GCPPrivateServiceConnectStatus type for use
// with apply.
type GCPPrivateServiceConnectStatusApplyConfiguration struct {
	Conditions            []v1.ConditionApplyConfiguration `json:"conditions,omitempty"`
	ServiceAttachmentName *string                          `json:"serviceAttachmentName,omitempty"`
	ServiceAttachmentURI  *string                          `json:"serviceAttachmentURI,omitempty"`
	EndpointIP            *string                          `json:"endpointIP,omitempty"`
	DNSZoneName           *string                          `json:"dnsZoneName,omitempty"`
	DNSRecords            []string                         `json:"dnsRecords,omitempty"`
}

// GCPPrivateServiceConnectStatusApplyConfiguration constructs a declarative configuration of the GCPPrivateServiceConnectStatus type for use with
// apply.
func GCPPrivateServiceConnectStatus() *GCPPrivateServiceConnectStatusApplyConfiguration {
	return &GCPPrivateServiceConnectStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *GCPPrivateServiceConnectStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *GCPPrivateServiceConnectStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithServiceAttachmentName sets the ServiceAttachmentName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAttachmentName field is set to the value of the last call.
func (b *GCPPrivateServiceConnectStatusApplyConfiguration) WithServiceAttachmentName(value string) *GCPPrivateServiceConnectStatusApplyConfiguration {
	b.ServiceAttachmentName = &value
	return b
}

// WithServiceAttachmentURI sets the ServiceAttachmentURI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAttachmentURI field is set to the value of the last call.
func (b *GCPPrivateServiceConnectStatusApplyConfiguration) WithServiceAttachmentURI(value string) *GCPPrivateServiceConnectStatusApplyConfiguration {
	b.ServiceAttachmentURI = &value
	return b
}

// WithEndpointIP sets the EndpointIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EndpointIP field is set to the value of the last call.
func (b *GCPPrivateServiceConnectStatusApplyConfiguration) WithEndpointIP(value string) *GCPPrivateServiceConnectStatusApplyConfiguration {
	b.EndpointIP = &value
	return b
}

// WithDNSZoneName sets the DNSZoneName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DNSZoneName field is set to the value of the last call.
func (b *GCPPrivateServiceConnectStatusApplyConfiguration) WithDNSZoneName(value string) *GCPPrivateServiceConnectStatusApplyConfiguration {
	b.DNSZoneName = &value
	return b
}

// WithDNSRecords adds the given value to the DNSRecords field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DNSRecords field.
func (b *GCPPrivateServiceConnectStatusApplyConfiguration) WithDNSRecords(values ...string) *GCPPrivateServiceConnectStatusApplyConfiguration {
	for i := range values {
		b.DNSRecords = append(b.DNSRecords, values[i])
	}
	return b
}
