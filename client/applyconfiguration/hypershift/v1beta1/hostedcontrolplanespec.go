/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "github.com/openshift/api/config/v1"
	hypershiftv1beta1 "github.com/openshift/hypershift/api/hypershift/v1beta1"
	corev1 "k8s.io/api/core/v1"
)

// HostedControlPlaneSpecApplyConfiguration represents an declarative configuration of the HostedControlPlaneSpec type for use
// with apply.
type HostedControlPlaneSpecApplyConfiguration struct {
	ReleaseImage                     *string                                              `json:"releaseImage,omitempty"`
	ControlPlaneReleaseImage         *string                                              `json:"controlPlaneReleaseImage,omitempty"`
	UpdateService                    *v1.URL                                              `json:"updateService,omitempty"`
	Channel                          *string                                              `json:"channel,omitempty"`
	PullSecret                       *corev1.LocalObjectReference                         `json:"pullSecret,omitempty"`
	IssuerURL                        *string                                              `json:"issuerURL,omitempty"`
	Networking                       *ClusterNetworkingApplyConfiguration                 `json:"networking,omitempty"`
	SSHKey                           *corev1.LocalObjectReference                         `json:"sshKey,omitempty"`
	ClusterID                        *string                                              `json:"clusterID,omitempty"`
	InfraID                          *string                                              `json:"infraID,omitempty"`
	Platform                         *PlatformSpecApplyConfiguration                      `json:"platform,omitempty"`
	DNS                              *DNSSpecApplyConfiguration                           `json:"dns,omitempty"`
	ServiceAccountSigningKey         *corev1.LocalObjectReference                         `json:"serviceAccountSigningKey,omitempty"`
	ControllerAvailabilityPolicy     *hypershiftv1beta1.AvailabilityPolicy                `json:"controllerAvailabilityPolicy,omitempty"`
	InfrastructureAvailabilityPolicy *hypershiftv1beta1.AvailabilityPolicy                `json:"infrastructureAvailabilityPolicy,omitempty"`
	FIPS                             *bool                                                `json:"fips,omitempty"`
	KubeConfig                       *KubeconfigSecretRefApplyConfiguration               `json:"kubeconfig,omitempty"`
	Services                         []ServicePublishingStrategyMappingApplyConfiguration `json:"services,omitempty"`
	AuditWebhook                     *corev1.LocalObjectReference                         `json:"auditWebhook,omitempty"`
	Etcd                             *EtcdSpecApplyConfiguration                          `json:"etcd,omitempty"`
	Configuration                    *ClusterConfigurationApplyConfiguration              `json:"configuration,omitempty"`
	ImageContentSources              []ImageContentSourceApplyConfiguration               `json:"imageContentSources,omitempty"`
	AdditionalTrustBundle            *corev1.LocalObjectReference                         `json:"additionalTrustBundle,omitempty"`
	SecretEncryption                 *SecretEncryptionSpecApplyConfiguration              `json:"secretEncryption,omitempty"`
	PausedUntil                      *string                                              `json:"pausedUntil,omitempty"`
	OLMCatalogPlacement              *hypershiftv1beta1.OLMCatalogPlacement               `json:"olmCatalogPlacement,omitempty"`
	Autoscaling                      *ClusterAutoscalingApplyConfiguration                `json:"autoscaling,omitempty"`
	NodeSelector                     map[string]string                                    `json:"nodeSelector,omitempty"`
}

// HostedControlPlaneSpecApplyConfiguration constructs an declarative configuration of the HostedControlPlaneSpec type for use with
// apply.
func HostedControlPlaneSpec() *HostedControlPlaneSpecApplyConfiguration {
	return &HostedControlPlaneSpecApplyConfiguration{}
}

// WithReleaseImage sets the ReleaseImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReleaseImage field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithReleaseImage(value string) *HostedControlPlaneSpecApplyConfiguration {
	b.ReleaseImage = &value
	return b
}

// WithControlPlaneReleaseImage sets the ControlPlaneReleaseImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControlPlaneReleaseImage field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithControlPlaneReleaseImage(value string) *HostedControlPlaneSpecApplyConfiguration {
	b.ControlPlaneReleaseImage = &value
	return b
}

// WithUpdateService sets the UpdateService field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdateService field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithUpdateService(value v1.URL) *HostedControlPlaneSpecApplyConfiguration {
	b.UpdateService = &value
	return b
}

// WithChannel sets the Channel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Channel field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithChannel(value string) *HostedControlPlaneSpecApplyConfiguration {
	b.Channel = &value
	return b
}

// WithPullSecret sets the PullSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PullSecret field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithPullSecret(value corev1.LocalObjectReference) *HostedControlPlaneSpecApplyConfiguration {
	b.PullSecret = &value
	return b
}

// WithIssuerURL sets the IssuerURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IssuerURL field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithIssuerURL(value string) *HostedControlPlaneSpecApplyConfiguration {
	b.IssuerURL = &value
	return b
}

// WithNetworking sets the Networking field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Networking field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithNetworking(value *ClusterNetworkingApplyConfiguration) *HostedControlPlaneSpecApplyConfiguration {
	b.Networking = value
	return b
}

// WithSSHKey sets the SSHKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SSHKey field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithSSHKey(value corev1.LocalObjectReference) *HostedControlPlaneSpecApplyConfiguration {
	b.SSHKey = &value
	return b
}

// WithClusterID sets the ClusterID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterID field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithClusterID(value string) *HostedControlPlaneSpecApplyConfiguration {
	b.ClusterID = &value
	return b
}

// WithInfraID sets the InfraID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InfraID field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithInfraID(value string) *HostedControlPlaneSpecApplyConfiguration {
	b.InfraID = &value
	return b
}

// WithPlatform sets the Platform field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Platform field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithPlatform(value *PlatformSpecApplyConfiguration) *HostedControlPlaneSpecApplyConfiguration {
	b.Platform = value
	return b
}

// WithDNS sets the DNS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DNS field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithDNS(value *DNSSpecApplyConfiguration) *HostedControlPlaneSpecApplyConfiguration {
	b.DNS = value
	return b
}

// WithServiceAccountSigningKey sets the ServiceAccountSigningKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccountSigningKey field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithServiceAccountSigningKey(value corev1.LocalObjectReference) *HostedControlPlaneSpecApplyConfiguration {
	b.ServiceAccountSigningKey = &value
	return b
}

// WithControllerAvailabilityPolicy sets the ControllerAvailabilityPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControllerAvailabilityPolicy field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithControllerAvailabilityPolicy(value hypershiftv1beta1.AvailabilityPolicy) *HostedControlPlaneSpecApplyConfiguration {
	b.ControllerAvailabilityPolicy = &value
	return b
}

// WithInfrastructureAvailabilityPolicy sets the InfrastructureAvailabilityPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InfrastructureAvailabilityPolicy field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithInfrastructureAvailabilityPolicy(value hypershiftv1beta1.AvailabilityPolicy) *HostedControlPlaneSpecApplyConfiguration {
	b.InfrastructureAvailabilityPolicy = &value
	return b
}

// WithFIPS sets the FIPS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FIPS field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithFIPS(value bool) *HostedControlPlaneSpecApplyConfiguration {
	b.FIPS = &value
	return b
}

// WithKubeConfig sets the KubeConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KubeConfig field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithKubeConfig(value *KubeconfigSecretRefApplyConfiguration) *HostedControlPlaneSpecApplyConfiguration {
	b.KubeConfig = value
	return b
}

// WithServices adds the given value to the Services field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Services field.
func (b *HostedControlPlaneSpecApplyConfiguration) WithServices(values ...*ServicePublishingStrategyMappingApplyConfiguration) *HostedControlPlaneSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithServices")
		}
		b.Services = append(b.Services, *values[i])
	}
	return b
}

// WithAuditWebhook sets the AuditWebhook field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AuditWebhook field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithAuditWebhook(value corev1.LocalObjectReference) *HostedControlPlaneSpecApplyConfiguration {
	b.AuditWebhook = &value
	return b
}

// WithEtcd sets the Etcd field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Etcd field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithEtcd(value *EtcdSpecApplyConfiguration) *HostedControlPlaneSpecApplyConfiguration {
	b.Etcd = value
	return b
}

// WithConfiguration sets the Configuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Configuration field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithConfiguration(value *ClusterConfigurationApplyConfiguration) *HostedControlPlaneSpecApplyConfiguration {
	b.Configuration = value
	return b
}

// WithImageContentSources adds the given value to the ImageContentSources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ImageContentSources field.
func (b *HostedControlPlaneSpecApplyConfiguration) WithImageContentSources(values ...*ImageContentSourceApplyConfiguration) *HostedControlPlaneSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithImageContentSources")
		}
		b.ImageContentSources = append(b.ImageContentSources, *values[i])
	}
	return b
}

// WithAdditionalTrustBundle sets the AdditionalTrustBundle field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AdditionalTrustBundle field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithAdditionalTrustBundle(value corev1.LocalObjectReference) *HostedControlPlaneSpecApplyConfiguration {
	b.AdditionalTrustBundle = &value
	return b
}

// WithSecretEncryption sets the SecretEncryption field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretEncryption field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithSecretEncryption(value *SecretEncryptionSpecApplyConfiguration) *HostedControlPlaneSpecApplyConfiguration {
	b.SecretEncryption = value
	return b
}

// WithPausedUntil sets the PausedUntil field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PausedUntil field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithPausedUntil(value string) *HostedControlPlaneSpecApplyConfiguration {
	b.PausedUntil = &value
	return b
}

// WithOLMCatalogPlacement sets the OLMCatalogPlacement field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OLMCatalogPlacement field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithOLMCatalogPlacement(value hypershiftv1beta1.OLMCatalogPlacement) *HostedControlPlaneSpecApplyConfiguration {
	b.OLMCatalogPlacement = &value
	return b
}

// WithAutoscaling sets the Autoscaling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Autoscaling field is set to the value of the last call.
func (b *HostedControlPlaneSpecApplyConfiguration) WithAutoscaling(value *ClusterAutoscalingApplyConfiguration) *HostedControlPlaneSpecApplyConfiguration {
	b.Autoscaling = value
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *HostedControlPlaneSpecApplyConfiguration) WithNodeSelector(entries map[string]string) *HostedControlPlaneSpecApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}
