/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	hypershiftv1beta1 "github.com/openshift/hypershift/api/hypershift/v1beta1"
)

// ClusterNetworkingApplyConfiguration represents a declarative configuration of the ClusterNetworking type for use
// with apply.
type ClusterNetworkingApplyConfiguration struct {
	MachineNetwork      []MachineNetworkEntryApplyConfiguration    `json:"machineNetwork,omitempty"`
	ClusterNetwork      []ClusterNetworkEntryApplyConfiguration    `json:"clusterNetwork,omitempty"`
	ServiceNetwork      []ServiceNetworkEntryApplyConfiguration    `json:"serviceNetwork,omitempty"`
	NetworkType         *hypershiftv1beta1.NetworkType             `json:"networkType,omitempty"`
	APIServer           *APIServerNetworkingApplyConfiguration     `json:"apiServer,omitempty"`
	OVNKubernetesConfig *OVNKubernetesConfigSpecApplyConfiguration `json:"ovnKubernetesConfig,omitempty"`
	IPSecConfig         *IPSecConfigSpecApplyConfiguration         `json:"ipsecConfig,omitempty"`
}

// ClusterNetworkingApplyConfiguration constructs a declarative configuration of the ClusterNetworking type for use with
// apply.
func ClusterNetworking() *ClusterNetworkingApplyConfiguration {
	return &ClusterNetworkingApplyConfiguration{}
}

// WithMachineNetwork adds the given value to the MachineNetwork field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MachineNetwork field.
func (b *ClusterNetworkingApplyConfiguration) WithMachineNetwork(values ...*MachineNetworkEntryApplyConfiguration) *ClusterNetworkingApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMachineNetwork")
		}
		b.MachineNetwork = append(b.MachineNetwork, *values[i])
	}
	return b
}

// WithClusterNetwork adds the given value to the ClusterNetwork field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClusterNetwork field.
func (b *ClusterNetworkingApplyConfiguration) WithClusterNetwork(values ...*ClusterNetworkEntryApplyConfiguration) *ClusterNetworkingApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithClusterNetwork")
		}
		b.ClusterNetwork = append(b.ClusterNetwork, *values[i])
	}
	return b
}

// WithServiceNetwork adds the given value to the ServiceNetwork field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ServiceNetwork field.
func (b *ClusterNetworkingApplyConfiguration) WithServiceNetwork(values ...*ServiceNetworkEntryApplyConfiguration) *ClusterNetworkingApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithServiceNetwork")
		}
		b.ServiceNetwork = append(b.ServiceNetwork, *values[i])
	}
	return b
}

// WithNetworkType sets the NetworkType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkType field is set to the value of the last call.
func (b *ClusterNetworkingApplyConfiguration) WithNetworkType(value hypershiftv1beta1.NetworkType) *ClusterNetworkingApplyConfiguration {
	b.NetworkType = &value
	return b
}

// WithAPIServer sets the APIServer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the APIServer field is set to the value of the last call.
func (b *ClusterNetworkingApplyConfiguration) WithAPIServer(value *APIServerNetworkingApplyConfiguration) *ClusterNetworkingApplyConfiguration {
	b.APIServer = value
	return b
}

// WithOVNKubernetesConfig sets the OVNKubernetesConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OVNKubernetesConfig field is set to the value of the last call.
func (b *ClusterNetworkingApplyConfiguration) WithOVNKubernetesConfig(value *OVNKubernetesConfigSpecApplyConfiguration) *ClusterNetworkingApplyConfiguration {
	b.OVNKubernetesConfig = value
	return b
}

// WithIPSecConfig sets the IPSecConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPSecConfig field is set to the value of the last call.
func (b *ClusterNetworkingApplyConfiguration) WithIPSecConfig(value *IPSecConfigSpecApplyConfiguration) *ClusterNetworkingApplyConfiguration {
	b.IPSecConfig = value
	return b
}
