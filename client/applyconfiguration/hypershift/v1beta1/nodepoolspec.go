/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// NodePoolSpecApplyConfiguration represents an declarative configuration of the NodePoolSpec type for use
// with apply.
type NodePoolSpecApplyConfiguration struct {
	ClusterName             *string                                `json:"clusterName,omitempty"`
	Release                 *ReleaseApplyConfiguration             `json:"release,omitempty"`
	Platform                *NodePoolPlatformApplyConfiguration    `json:"platform,omitempty"`
	Replicas                *int32                                 `json:"replicas,omitempty"`
	Management              *NodePoolManagementApplyConfiguration  `json:"management,omitempty"`
	AutoScaling             *NodePoolAutoScalingApplyConfiguration `json:"autoScaling,omitempty"`
	Config                  []v1.LocalObjectReference              `json:"config,omitempty"`
	NodeDrainTimeout        *metav1.Duration                       `json:"nodeDrainTimeout,omitempty"`
	NodeVolumeDetachTimeout *metav1.Duration                       `json:"nodeVolumeDetachTimeout,omitempty"`
	NodeLabels              map[string]string                      `json:"nodeLabels,omitempty"`
	Taints                  []TaintApplyConfiguration              `json:"taints,omitempty"`
	PausedUntil             *string                                `json:"pausedUntil,omitempty"`
	TuningConfig            []v1.LocalObjectReference              `json:"tuningConfig,omitempty"`
	Arch                    *string                                `json:"arch,omitempty"`
}

// NodePoolSpecApplyConfiguration constructs an declarative configuration of the NodePoolSpec type for use with
// apply.
func NodePoolSpec() *NodePoolSpecApplyConfiguration {
	return &NodePoolSpecApplyConfiguration{}
}

// WithClusterName sets the ClusterName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterName field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithClusterName(value string) *NodePoolSpecApplyConfiguration {
	b.ClusterName = &value
	return b
}

// WithRelease sets the Release field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Release field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithRelease(value *ReleaseApplyConfiguration) *NodePoolSpecApplyConfiguration {
	b.Release = value
	return b
}

// WithPlatform sets the Platform field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Platform field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithPlatform(value *NodePoolPlatformApplyConfiguration) *NodePoolSpecApplyConfiguration {
	b.Platform = value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithReplicas(value int32) *NodePoolSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithManagement sets the Management field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Management field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithManagement(value *NodePoolManagementApplyConfiguration) *NodePoolSpecApplyConfiguration {
	b.Management = value
	return b
}

// WithAutoScaling sets the AutoScaling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AutoScaling field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithAutoScaling(value *NodePoolAutoScalingApplyConfiguration) *NodePoolSpecApplyConfiguration {
	b.AutoScaling = value
	return b
}

// WithConfig adds the given value to the Config field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Config field.
func (b *NodePoolSpecApplyConfiguration) WithConfig(values ...v1.LocalObjectReference) *NodePoolSpecApplyConfiguration {
	for i := range values {
		b.Config = append(b.Config, values[i])
	}
	return b
}

// WithNodeDrainTimeout sets the NodeDrainTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeDrainTimeout field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithNodeDrainTimeout(value metav1.Duration) *NodePoolSpecApplyConfiguration {
	b.NodeDrainTimeout = &value
	return b
}

// WithNodeVolumeDetachTimeout sets the NodeVolumeDetachTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeVolumeDetachTimeout field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithNodeVolumeDetachTimeout(value metav1.Duration) *NodePoolSpecApplyConfiguration {
	b.NodeVolumeDetachTimeout = &value
	return b
}

// WithNodeLabels puts the entries into the NodeLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeLabels field,
// overwriting an existing map entries in NodeLabels field with the same key.
func (b *NodePoolSpecApplyConfiguration) WithNodeLabels(entries map[string]string) *NodePoolSpecApplyConfiguration {
	if b.NodeLabels == nil && len(entries) > 0 {
		b.NodeLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeLabels[k] = v
	}
	return b
}

// WithTaints adds the given value to the Taints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Taints field.
func (b *NodePoolSpecApplyConfiguration) WithTaints(values ...*TaintApplyConfiguration) *NodePoolSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTaints")
		}
		b.Taints = append(b.Taints, *values[i])
	}
	return b
}

// WithPausedUntil sets the PausedUntil field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PausedUntil field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithPausedUntil(value string) *NodePoolSpecApplyConfiguration {
	b.PausedUntil = &value
	return b
}

// WithTuningConfig adds the given value to the TuningConfig field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TuningConfig field.
func (b *NodePoolSpecApplyConfiguration) WithTuningConfig(values ...v1.LocalObjectReference) *NodePoolSpecApplyConfiguration {
	for i := range values {
		b.TuningConfig = append(b.TuningConfig, values[i])
	}
	return b
}

// WithArch sets the Arch field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Arch field is set to the value of the last call.
func (b *NodePoolSpecApplyConfiguration) WithArch(value string) *NodePoolSpecApplyConfiguration {
	b.Arch = &value
	return b
}
