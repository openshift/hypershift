/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	hypershiftv1beta1 "github.com/openshift/hypershift/api/hypershift/v1beta1"
)

// AWSPlatformSpecApplyConfiguration represents an declarative configuration of the AWSPlatformSpec type for use
// with apply.
type AWSPlatformSpecApplyConfiguration struct {
	Region                      *string                                   `json:"region,omitempty"`
	CloudProviderConfig         *AWSCloudProviderConfigApplyConfiguration `json:"cloudProviderConfig,omitempty"`
	ServiceEndpoints            []AWSServiceEndpointApplyConfiguration    `json:"serviceEndpoints,omitempty"`
	RolesRef                    *AWSRolesRefApplyConfiguration            `json:"rolesRef,omitempty"`
	ResourceTags                []AWSResourceTagApplyConfiguration        `json:"resourceTags,omitempty"`
	EndpointAccess              *hypershiftv1beta1.AWSEndpointAccessType  `json:"endpointAccess,omitempty"`
	AdditionalAllowedPrincipals []string                                  `json:"additionalAllowedPrincipals,omitempty"`
	MultiArch                   *bool                                     `json:"multiArch,omitempty"`
	SharedVPC                   *AWSSharedVPCApplyConfiguration           `json:"sharedVPC,omitempty"`
}

// AWSPlatformSpecApplyConfiguration constructs an declarative configuration of the AWSPlatformSpec type for use with
// apply.
func AWSPlatformSpec() *AWSPlatformSpecApplyConfiguration {
	return &AWSPlatformSpecApplyConfiguration{}
}

// WithRegion sets the Region field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Region field is set to the value of the last call.
func (b *AWSPlatformSpecApplyConfiguration) WithRegion(value string) *AWSPlatformSpecApplyConfiguration {
	b.Region = &value
	return b
}

// WithCloudProviderConfig sets the CloudProviderConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudProviderConfig field is set to the value of the last call.
func (b *AWSPlatformSpecApplyConfiguration) WithCloudProviderConfig(value *AWSCloudProviderConfigApplyConfiguration) *AWSPlatformSpecApplyConfiguration {
	b.CloudProviderConfig = value
	return b
}

// WithServiceEndpoints adds the given value to the ServiceEndpoints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ServiceEndpoints field.
func (b *AWSPlatformSpecApplyConfiguration) WithServiceEndpoints(values ...*AWSServiceEndpointApplyConfiguration) *AWSPlatformSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithServiceEndpoints")
		}
		b.ServiceEndpoints = append(b.ServiceEndpoints, *values[i])
	}
	return b
}

// WithRolesRef sets the RolesRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RolesRef field is set to the value of the last call.
func (b *AWSPlatformSpecApplyConfiguration) WithRolesRef(value *AWSRolesRefApplyConfiguration) *AWSPlatformSpecApplyConfiguration {
	b.RolesRef = value
	return b
}

// WithResourceTags adds the given value to the ResourceTags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ResourceTags field.
func (b *AWSPlatformSpecApplyConfiguration) WithResourceTags(values ...*AWSResourceTagApplyConfiguration) *AWSPlatformSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithResourceTags")
		}
		b.ResourceTags = append(b.ResourceTags, *values[i])
	}
	return b
}

// WithEndpointAccess sets the EndpointAccess field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EndpointAccess field is set to the value of the last call.
func (b *AWSPlatformSpecApplyConfiguration) WithEndpointAccess(value hypershiftv1beta1.AWSEndpointAccessType) *AWSPlatformSpecApplyConfiguration {
	b.EndpointAccess = &value
	return b
}

// WithAdditionalAllowedPrincipals adds the given value to the AdditionalAllowedPrincipals field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdditionalAllowedPrincipals field.
func (b *AWSPlatformSpecApplyConfiguration) WithAdditionalAllowedPrincipals(values ...string) *AWSPlatformSpecApplyConfiguration {
	for i := range values {
		b.AdditionalAllowedPrincipals = append(b.AdditionalAllowedPrincipals, values[i])
	}
	return b
}

// WithMultiArch sets the MultiArch field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MultiArch field is set to the value of the last call.
func (b *AWSPlatformSpecApplyConfiguration) WithMultiArch(value bool) *AWSPlatformSpecApplyConfiguration {
	b.MultiArch = &value
	return b
}

// WithSharedVPC sets the SharedVPC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SharedVPC field is set to the value of the last call.
func (b *AWSPlatformSpecApplyConfiguration) WithSharedVPC(value *AWSSharedVPCApplyConfiguration) *AWSPlatformSpecApplyConfiguration {
	b.SharedVPC = value
	return b
}
