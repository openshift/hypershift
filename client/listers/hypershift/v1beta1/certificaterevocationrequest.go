/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/openshift/hypershift/api/hypershift/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CertificateRevocationRequestLister helps list CertificateRevocationRequests.
// All objects returned here must be treated as read-only.
type CertificateRevocationRequestLister interface {
	// List lists all CertificateRevocationRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.CertificateRevocationRequest, err error)
	// CertificateRevocationRequests returns an object that can list and get CertificateRevocationRequests.
	CertificateRevocationRequests(namespace string) CertificateRevocationRequestNamespaceLister
	CertificateRevocationRequestListerExpansion
}

// certificateRevocationRequestLister implements the CertificateRevocationRequestLister interface.
type certificateRevocationRequestLister struct {
	indexer cache.Indexer
}

// NewCertificateRevocationRequestLister returns a new CertificateRevocationRequestLister.
func NewCertificateRevocationRequestLister(indexer cache.Indexer) CertificateRevocationRequestLister {
	return &certificateRevocationRequestLister{indexer: indexer}
}

// List lists all CertificateRevocationRequests in the indexer.
func (s *certificateRevocationRequestLister) List(selector labels.Selector) (ret []*v1beta1.CertificateRevocationRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.CertificateRevocationRequest))
	})
	return ret, err
}

// CertificateRevocationRequests returns an object that can list and get CertificateRevocationRequests.
func (s *certificateRevocationRequestLister) CertificateRevocationRequests(namespace string) CertificateRevocationRequestNamespaceLister {
	return certificateRevocationRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CertificateRevocationRequestNamespaceLister helps list and get CertificateRevocationRequests.
// All objects returned here must be treated as read-only.
type CertificateRevocationRequestNamespaceLister interface {
	// List lists all CertificateRevocationRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.CertificateRevocationRequest, err error)
	// Get retrieves the CertificateRevocationRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.CertificateRevocationRequest, error)
	CertificateRevocationRequestNamespaceListerExpansion
}

// certificateRevocationRequestNamespaceLister implements the CertificateRevocationRequestNamespaceLister
// interface.
type certificateRevocationRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CertificateRevocationRequests in the indexer for a given namespace.
func (s certificateRevocationRequestNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.CertificateRevocationRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.CertificateRevocationRequest))
	})
	return ret, err
}

// Get retrieves the CertificateRevocationRequest from the indexer for a given namespace and name.
func (s certificateRevocationRequestNamespaceLister) Get(name string) (*v1beta1.CertificateRevocationRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("certificaterevocationrequest"), name)
	}
	return obj.(*v1beta1.CertificateRevocationRequest), nil
}
