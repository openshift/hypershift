// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RouteFilterBase route filter base
//
// swagger:model RouteFilterBase
type RouteFilterBase struct {

	// The minimum matching length of the prefix-set(1 ≤ value ≤ 32)
	// Example: 25
	GE int64 `json:"GE,omitempty"`

	// The maximum matching length of the prefix-set( 1 ≤ value ≤ 32)
	// Example: 30
	LE int64 `json:"LE,omitempty"`

	// action of the filter
	// * allow: allow
	// * deny: deny
	//
	// Required: true
	// Enum: ["allow","deny"]
	Action *string `json:"action"`

	// direction of the filter
	// * import - import the routes
	// * export - export the routes
	//
	// Required: true
	// Enum: ["import","export"]
	Direction *string `json:"direction"`

	// priority or order of the filter
	// Example: 10
	// Required: true
	Index *int64 `json:"index"`

	// IP prefix representing an address and mask length of the prefix-set
	// Example: 192.168.91.0/24
	// Required: true
	Prefix *string `json:"prefix"`
}

// Validate validates this route filter base
func (m *RouteFilterBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefix(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var routeFilterBaseTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeFilterBaseTypeActionPropEnum = append(routeFilterBaseTypeActionPropEnum, v)
	}
}

const (

	// RouteFilterBaseActionAllow captures enum value "allow"
	RouteFilterBaseActionAllow string = "allow"

	// RouteFilterBaseActionDeny captures enum value "deny"
	RouteFilterBaseActionDeny string = "deny"
)

// prop value enum
func (m *RouteFilterBase) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeFilterBaseTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RouteFilterBase) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

var routeFilterBaseTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["import","export"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeFilterBaseTypeDirectionPropEnum = append(routeFilterBaseTypeDirectionPropEnum, v)
	}
}

const (

	// RouteFilterBaseDirectionImport captures enum value "import"
	RouteFilterBaseDirectionImport string = "import"

	// RouteFilterBaseDirectionExport captures enum value "export"
	RouteFilterBaseDirectionExport string = "export"
)

// prop value enum
func (m *RouteFilterBase) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeFilterBaseTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RouteFilterBase) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *RouteFilterBase) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *RouteFilterBase) validatePrefix(formats strfmt.Registry) error {

	if err := validate.Required("prefix", "body", m.Prefix); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this route filter base based on context it is used
func (m *RouteFilterBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RouteFilterBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouteFilterBase) UnmarshalBinary(b []byte) error {
	var res RouteFilterBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
