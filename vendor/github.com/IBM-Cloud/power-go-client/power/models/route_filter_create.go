// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RouteFilterCreate route filter create
//
// swagger:model RouteFilterCreate
type RouteFilterCreate struct {

	// The minimum matching length of the prefix-set(1 ≤ value ≤ 32 & value ≤ LE)
	// Example: 25
	// Maximum: 32
	// Minimum: 1
	GE int64 `json:"GE,omitempty"`

	// The maximum matching length of the prefix-set( 1 ≤ value ≤ 32 & value >= GE)
	// Example: 30
	// Maximum: 32
	// Minimum: 1
	LE int64 `json:"LE,omitempty"`

	// action of the filter
	// * allow: allow
	// * deny: deny
	//
	// Enum: ["allow","deny"]
	Action *string `json:"action,omitempty"`

	// direction of the filter
	// * import - import the routes
	// * export - export the routes
	//
	// Required: true
	// Enum: ["import","export"]
	Direction *string `json:"direction"`

	// priority or order of the filter
	// Example: 10
	// Required: true
	// Maximum: 1e+07
	// Minimum: 1
	Index *int64 `json:"index"`

	// IP prefix representing an address and mask length of the prefix-set
	// Example: 192.168.91.0/24
	// Required: true
	Prefix *string `json:"prefix"`
}

// Validate validates this route filter create
func (m *RouteFilterCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefix(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteFilterCreate) validateGE(formats strfmt.Registry) error {
	if swag.IsZero(m.GE) { // not required
		return nil
	}

	if err := validate.MinimumInt("GE", "body", m.GE, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("GE", "body", m.GE, 32, false); err != nil {
		return err
	}

	return nil
}

func (m *RouteFilterCreate) validateLE(formats strfmt.Registry) error {
	if swag.IsZero(m.LE) { // not required
		return nil
	}

	if err := validate.MinimumInt("LE", "body", m.LE, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("LE", "body", m.LE, 32, false); err != nil {
		return err
	}

	return nil
}

var routeFilterCreateTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeFilterCreateTypeActionPropEnum = append(routeFilterCreateTypeActionPropEnum, v)
	}
}

const (

	// RouteFilterCreateActionAllow captures enum value "allow"
	RouteFilterCreateActionAllow string = "allow"

	// RouteFilterCreateActionDeny captures enum value "deny"
	RouteFilterCreateActionDeny string = "deny"
)

// prop value enum
func (m *RouteFilterCreate) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeFilterCreateTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RouteFilterCreate) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

var routeFilterCreateTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["import","export"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeFilterCreateTypeDirectionPropEnum = append(routeFilterCreateTypeDirectionPropEnum, v)
	}
}

const (

	// RouteFilterCreateDirectionImport captures enum value "import"
	RouteFilterCreateDirectionImport string = "import"

	// RouteFilterCreateDirectionExport captures enum value "export"
	RouteFilterCreateDirectionExport string = "export"
)

// prop value enum
func (m *RouteFilterCreate) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeFilterCreateTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RouteFilterCreate) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *RouteFilterCreate) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	if err := validate.MinimumInt("index", "body", *m.Index, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("index", "body", *m.Index, 1e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *RouteFilterCreate) validatePrefix(formats strfmt.Registry) error {

	if err := validate.Required("prefix", "body", m.Prefix); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this route filter create based on context it is used
func (m *RouteFilterCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RouteFilterCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouteFilterCreate) UnmarshalBinary(b []byte) error {
	var res RouteFilterCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
