// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RouteFilter route filter
//
// swagger:model RouteFilter
type RouteFilter struct {

	// The minimum matching length of the prefix-set(1 ≤ value ≤ 32 value ≤ GE)
	// Example: 25
	// Maximum: 32
	// Minimum: 1
	GE *int64 `json:"GE,omitempty"`

	// The maximum matching length of the prefix-set( 1 ≤ value ≤ 32 value >= GE)
	// Example: 30
	// Maximum: 32
	// Minimum: 1
	LE *int64 `json:"LE,omitempty"`

	// action of the filter
	// * allow: allow
	// * deny: deny
	//
	// Required: true
	// Enum: ["allow","deny"]
	Action *string `json:"action"`

	// time stamp for create route filter
	// Required: true
	CreationDate *string `json:"creationDate"`

	// direction of the filter
	// * import - import the routes
	// * export - export the routes
	//
	// Required: true
	// Enum: ["import","export"]
	Direction *string `json:"direction"`

	// error description
	// Required: true
	Error *string `json:"error"`

	// priority or order of the filter
	// Example: 10
	// Required: true
	Index *int64 `json:"index"`

	// IP prefix representing an address and mask length of the prefix-set
	// Example: 192.168.91.0/24
	// Required: true
	Prefix *string `json:"prefix"`

	// route filter ID
	// Example: 031ab7da-bca6-493f-ac55-1a2a26f19160
	// Required: true
	RouteFilterID *string `json:"routeFilterID"`

	// status of the route filter
	// Example: active
	// Required: true
	// Enum: ["active","configuring","removing","error","updating"]
	State *string `json:"state"`
}

// Validate validates this route filter
func (m *RouteFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteFilterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteFilter) validateGE(formats strfmt.Registry) error {
	if swag.IsZero(m.GE) { // not required
		return nil
	}

	if err := validate.MinimumInt("GE", "body", *m.GE, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("GE", "body", *m.GE, 32, false); err != nil {
		return err
	}

	return nil
}

func (m *RouteFilter) validateLE(formats strfmt.Registry) error {
	if swag.IsZero(m.LE) { // not required
		return nil
	}

	if err := validate.MinimumInt("LE", "body", *m.LE, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("LE", "body", *m.LE, 32, false); err != nil {
		return err
	}

	return nil
}

var routeFilterTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeFilterTypeActionPropEnum = append(routeFilterTypeActionPropEnum, v)
	}
}

const (

	// RouteFilterActionAllow captures enum value "allow"
	RouteFilterActionAllow string = "allow"

	// RouteFilterActionDeny captures enum value "deny"
	RouteFilterActionDeny string = "deny"
)

// prop value enum
func (m *RouteFilter) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeFilterTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RouteFilter) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *RouteFilter) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", m.CreationDate); err != nil {
		return err
	}

	return nil
}

var routeFilterTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["import","export"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeFilterTypeDirectionPropEnum = append(routeFilterTypeDirectionPropEnum, v)
	}
}

const (

	// RouteFilterDirectionImport captures enum value "import"
	RouteFilterDirectionImport string = "import"

	// RouteFilterDirectionExport captures enum value "export"
	RouteFilterDirectionExport string = "export"
)

// prop value enum
func (m *RouteFilter) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeFilterTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RouteFilter) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *RouteFilter) validateError(formats strfmt.Registry) error {

	if err := validate.Required("error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

func (m *RouteFilter) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *RouteFilter) validatePrefix(formats strfmt.Registry) error {

	if err := validate.Required("prefix", "body", m.Prefix); err != nil {
		return err
	}

	return nil
}

func (m *RouteFilter) validateRouteFilterID(formats strfmt.Registry) error {

	if err := validate.Required("routeFilterID", "body", m.RouteFilterID); err != nil {
		return err
	}

	return nil
}

var routeFilterTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","configuring","removing","error","updating"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeFilterTypeStatePropEnum = append(routeFilterTypeStatePropEnum, v)
	}
}

const (

	// RouteFilterStateActive captures enum value "active"
	RouteFilterStateActive string = "active"

	// RouteFilterStateConfiguring captures enum value "configuring"
	RouteFilterStateConfiguring string = "configuring"

	// RouteFilterStateRemoving captures enum value "removing"
	RouteFilterStateRemoving string = "removing"

	// RouteFilterStateError captures enum value "error"
	RouteFilterStateError string = "error"

	// RouteFilterStateUpdating captures enum value "updating"
	RouteFilterStateUpdating string = "updating"
)

// prop value enum
func (m *RouteFilter) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeFilterTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RouteFilter) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this route filter based on context it is used
func (m *RouteFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RouteFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouteFilter) UnmarshalBinary(b []byte) error {
	var res RouteFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
