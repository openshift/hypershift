// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PeerInterface peer interface
//
// swagger:model PeerInterface
type PeerInterface struct {

	// device ID of the peer interface
	// Example: switch1
	// Required: true
	DeviceID *string `json:"deviceID"`

	// peer interface name
	// Example: Peer121
	// Required: true
	Name *string `json:"name"`

	// peer interface ID
	// Example: 031ab7da-bca6-493f-ac55-1a2a26f19160
	// Required: true
	PeerInterfaceID *string `json:"peerInterfaceID"`

	// type of peer interface
	// Example: interface
	// Required: true
	// Enum: ["interface","lag"]
	PeerType *string `json:"peerType"`

	// port ID of the peer interface
	// Example: po10
	// Required: true
	PortID *string `json:"portID"`
}

// Validate validates this peer interface
func (m *PeerInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerInterfaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeerInterface) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceID", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

func (m *PeerInterface) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PeerInterface) validatePeerInterfaceID(formats strfmt.Registry) error {

	if err := validate.Required("peerInterfaceID", "body", m.PeerInterfaceID); err != nil {
		return err
	}

	return nil
}

var peerInterfaceTypePeerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["interface","lag"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		peerInterfaceTypePeerTypePropEnum = append(peerInterfaceTypePeerTypePropEnum, v)
	}
}

const (

	// PeerInterfacePeerTypeInterface captures enum value "interface"
	PeerInterfacePeerTypeInterface string = "interface"

	// PeerInterfacePeerTypeLag captures enum value "lag"
	PeerInterfacePeerTypeLag string = "lag"
)

// prop value enum
func (m *PeerInterface) validatePeerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, peerInterfaceTypePeerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PeerInterface) validatePeerType(formats strfmt.Registry) error {

	if err := validate.Required("peerType", "body", m.PeerType); err != nil {
		return err
	}

	// value enum
	if err := m.validatePeerTypeEnum("peerType", "body", *m.PeerType); err != nil {
		return err
	}

	return nil
}

func (m *PeerInterface) validatePortID(formats strfmt.Registry) error {

	if err := validate.Required("portID", "body", m.PortID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this peer interface based on context it is used
func (m *PeerInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PeerInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeerInterface) UnmarshalBinary(b []byte) error {
	var res PeerInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
