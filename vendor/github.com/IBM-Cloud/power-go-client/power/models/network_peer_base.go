// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkPeerBase network peer base
//
// swagger:model NetworkPeerBase
type NetworkPeerBase struct {

	// ASN number at customer network side
	// Example: 64512
	CustomerASN int64 `json:"customerASN,omitempty"`

	// IP address used for configuring customer network interface with network subnet mask. customerCidr and ibmCidr must have matching network and subnet mask values.
	// Example: 192.168.91.2/30
	CustomerCidr string `json:"customerCidr,omitempty"`

	// default action for export route filter
	// * allow: allow
	// * deny: deny
	//
	// Example: allow
	// Enum: ["allow","deny"]
	DefaultExportRouteFilter string `json:"defaultExportRouteFilter,omitempty"`

	// default action for import route filter
	// * allow: allow
	// * deny: deny
	//
	// Example: allow
	// Enum: ["allow","deny"]
	DefaultImportRouteFilter string `json:"defaultImportRouteFilter,omitempty"`

	// ASN number at IBM PowerVS side
	// Example: 64512
	IbmASN int64 `json:"ibmASN,omitempty"`

	// IP address used for configuring IBM network interface with network subnet mask. customerCidr and ibmCidr must have matching network and subnet mask values.
	// Example: 192.168.91.1/30
	IbmCidr string `json:"ibmCidr,omitempty"`

	// user defined name
	// Example: newPeerNetwork
	Name string `json:"name,omitempty"`

	// peer interface id. use API '/v1/network-peers/interfaces' to get a list of valid peer interface id
	// Example: 031ab7da-bca6-493f-ac55-1a2a26f19160
	PeerInterfaceID string `json:"peerInterfaceID,omitempty"`

	// type of the peer network
	// * dcnetwork_bgp: broader gateway protocol is used to share routes between two autonomous network
	//
	// Example: dcnetwork_bgp
	// Enum: ["dcnetwork_bgp"]
	Type string `json:"type,omitempty"`

	// A vlan configured at the customer network.
	// Example: 2000
	Vlan int64 `json:"vlan,omitempty"`
}

// Validate validates this network peer base
func (m *NetworkPeerBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultExportRouteFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultImportRouteFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var networkPeerBaseTypeDefaultExportRouteFilterPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkPeerBaseTypeDefaultExportRouteFilterPropEnum = append(networkPeerBaseTypeDefaultExportRouteFilterPropEnum, v)
	}
}

const (

	// NetworkPeerBaseDefaultExportRouteFilterAllow captures enum value "allow"
	NetworkPeerBaseDefaultExportRouteFilterAllow string = "allow"

	// NetworkPeerBaseDefaultExportRouteFilterDeny captures enum value "deny"
	NetworkPeerBaseDefaultExportRouteFilterDeny string = "deny"
)

// prop value enum
func (m *NetworkPeerBase) validateDefaultExportRouteFilterEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkPeerBaseTypeDefaultExportRouteFilterPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkPeerBase) validateDefaultExportRouteFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultExportRouteFilter) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultExportRouteFilterEnum("defaultExportRouteFilter", "body", m.DefaultExportRouteFilter); err != nil {
		return err
	}

	return nil
}

var networkPeerBaseTypeDefaultImportRouteFilterPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkPeerBaseTypeDefaultImportRouteFilterPropEnum = append(networkPeerBaseTypeDefaultImportRouteFilterPropEnum, v)
	}
}

const (

	// NetworkPeerBaseDefaultImportRouteFilterAllow captures enum value "allow"
	NetworkPeerBaseDefaultImportRouteFilterAllow string = "allow"

	// NetworkPeerBaseDefaultImportRouteFilterDeny captures enum value "deny"
	NetworkPeerBaseDefaultImportRouteFilterDeny string = "deny"
)

// prop value enum
func (m *NetworkPeerBase) validateDefaultImportRouteFilterEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkPeerBaseTypeDefaultImportRouteFilterPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkPeerBase) validateDefaultImportRouteFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultImportRouteFilter) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultImportRouteFilterEnum("defaultImportRouteFilter", "body", m.DefaultImportRouteFilter); err != nil {
		return err
	}

	return nil
}

var networkPeerBaseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dcnetwork_bgp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkPeerBaseTypeTypePropEnum = append(networkPeerBaseTypeTypePropEnum, v)
	}
}

const (

	// NetworkPeerBaseTypeDcnetworkBgp captures enum value "dcnetwork_bgp"
	NetworkPeerBaseTypeDcnetworkBgp string = "dcnetwork_bgp"
)

// prop value enum
func (m *NetworkPeerBase) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkPeerBaseTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkPeerBase) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this network peer base based on context it is used
func (m *NetworkPeerBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetworkPeerBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkPeerBase) UnmarshalBinary(b []byte) error {
	var res NetworkPeerBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
