// Code generated by go-swagger; DO NOT EDIT.

package network_peers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1NetworkPeersRouteFilterIDGetReader is a Reader for the V1NetworkPeersRouteFilterIDGet structure.
type V1NetworkPeersRouteFilterIDGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1NetworkPeersRouteFilterIDGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1NetworkPeersRouteFilterIDGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1NetworkPeersRouteFilterIDGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1NetworkPeersRouteFilterIDGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1NetworkPeersRouteFilterIDGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1NetworkPeersRouteFilterIDGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewV1NetworkPeersRouteFilterIDGetConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1NetworkPeersRouteFilterIDGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}] v1.networkPeers.routeFilter.id.get", response, response.Code())
	}
}

// NewV1NetworkPeersRouteFilterIDGetOK creates a V1NetworkPeersRouteFilterIDGetOK with default headers values
func NewV1NetworkPeersRouteFilterIDGetOK() *V1NetworkPeersRouteFilterIDGetOK {
	return &V1NetworkPeersRouteFilterIDGetOK{}
}

/*
V1NetworkPeersRouteFilterIDGetOK describes a response with status code 200, with default header values.

OK
*/
type V1NetworkPeersRouteFilterIDGetOK struct {
	Payload *models.RouteFilter
}

// IsSuccess returns true when this v1 network peers route filter Id get o k response has a 2xx status code
func (o *V1NetworkPeersRouteFilterIDGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 network peers route filter Id get o k response has a 3xx status code
func (o *V1NetworkPeersRouteFilterIDGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 network peers route filter Id get o k response has a 4xx status code
func (o *V1NetworkPeersRouteFilterIDGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 network peers route filter Id get o k response has a 5xx status code
func (o *V1NetworkPeersRouteFilterIDGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 network peers route filter Id get o k response a status code equal to that given
func (o *V1NetworkPeersRouteFilterIDGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 network peers route filter Id get o k response
func (o *V1NetworkPeersRouteFilterIDGetOK) Code() int {
	return 200
}

func (o *V1NetworkPeersRouteFilterIDGetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetOK %s", 200, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetOK %s", 200, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetOK) GetPayload() *models.RouteFilter {
	return o.Payload
}

func (o *V1NetworkPeersRouteFilterIDGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RouteFilter)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1NetworkPeersRouteFilterIDGetBadRequest creates a V1NetworkPeersRouteFilterIDGetBadRequest with default headers values
func NewV1NetworkPeersRouteFilterIDGetBadRequest() *V1NetworkPeersRouteFilterIDGetBadRequest {
	return &V1NetworkPeersRouteFilterIDGetBadRequest{}
}

/*
V1NetworkPeersRouteFilterIDGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1NetworkPeersRouteFilterIDGetBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 network peers route filter Id get bad request response has a 2xx status code
func (o *V1NetworkPeersRouteFilterIDGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 network peers route filter Id get bad request response has a 3xx status code
func (o *V1NetworkPeersRouteFilterIDGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 network peers route filter Id get bad request response has a 4xx status code
func (o *V1NetworkPeersRouteFilterIDGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 network peers route filter Id get bad request response has a 5xx status code
func (o *V1NetworkPeersRouteFilterIDGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 network peers route filter Id get bad request response a status code equal to that given
func (o *V1NetworkPeersRouteFilterIDGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 network peers route filter Id get bad request response
func (o *V1NetworkPeersRouteFilterIDGetBadRequest) Code() int {
	return 400
}

func (o *V1NetworkPeersRouteFilterIDGetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetBadRequest %s", 400, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetBadRequest %s", 400, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1NetworkPeersRouteFilterIDGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1NetworkPeersRouteFilterIDGetUnauthorized creates a V1NetworkPeersRouteFilterIDGetUnauthorized with default headers values
func NewV1NetworkPeersRouteFilterIDGetUnauthorized() *V1NetworkPeersRouteFilterIDGetUnauthorized {
	return &V1NetworkPeersRouteFilterIDGetUnauthorized{}
}

/*
V1NetworkPeersRouteFilterIDGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1NetworkPeersRouteFilterIDGetUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 network peers route filter Id get unauthorized response has a 2xx status code
func (o *V1NetworkPeersRouteFilterIDGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 network peers route filter Id get unauthorized response has a 3xx status code
func (o *V1NetworkPeersRouteFilterIDGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 network peers route filter Id get unauthorized response has a 4xx status code
func (o *V1NetworkPeersRouteFilterIDGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 network peers route filter Id get unauthorized response has a 5xx status code
func (o *V1NetworkPeersRouteFilterIDGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 network peers route filter Id get unauthorized response a status code equal to that given
func (o *V1NetworkPeersRouteFilterIDGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 network peers route filter Id get unauthorized response
func (o *V1NetworkPeersRouteFilterIDGetUnauthorized) Code() int {
	return 401
}

func (o *V1NetworkPeersRouteFilterIDGetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetUnauthorized %s", 401, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetUnauthorized %s", 401, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1NetworkPeersRouteFilterIDGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1NetworkPeersRouteFilterIDGetForbidden creates a V1NetworkPeersRouteFilterIDGetForbidden with default headers values
func NewV1NetworkPeersRouteFilterIDGetForbidden() *V1NetworkPeersRouteFilterIDGetForbidden {
	return &V1NetworkPeersRouteFilterIDGetForbidden{}
}

/*
V1NetworkPeersRouteFilterIDGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1NetworkPeersRouteFilterIDGetForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 network peers route filter Id get forbidden response has a 2xx status code
func (o *V1NetworkPeersRouteFilterIDGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 network peers route filter Id get forbidden response has a 3xx status code
func (o *V1NetworkPeersRouteFilterIDGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 network peers route filter Id get forbidden response has a 4xx status code
func (o *V1NetworkPeersRouteFilterIDGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 network peers route filter Id get forbidden response has a 5xx status code
func (o *V1NetworkPeersRouteFilterIDGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 network peers route filter Id get forbidden response a status code equal to that given
func (o *V1NetworkPeersRouteFilterIDGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 network peers route filter Id get forbidden response
func (o *V1NetworkPeersRouteFilterIDGetForbidden) Code() int {
	return 403
}

func (o *V1NetworkPeersRouteFilterIDGetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetForbidden %s", 403, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetForbidden %s", 403, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1NetworkPeersRouteFilterIDGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1NetworkPeersRouteFilterIDGetNotFound creates a V1NetworkPeersRouteFilterIDGetNotFound with default headers values
func NewV1NetworkPeersRouteFilterIDGetNotFound() *V1NetworkPeersRouteFilterIDGetNotFound {
	return &V1NetworkPeersRouteFilterIDGetNotFound{}
}

/*
V1NetworkPeersRouteFilterIDGetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1NetworkPeersRouteFilterIDGetNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 network peers route filter Id get not found response has a 2xx status code
func (o *V1NetworkPeersRouteFilterIDGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 network peers route filter Id get not found response has a 3xx status code
func (o *V1NetworkPeersRouteFilterIDGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 network peers route filter Id get not found response has a 4xx status code
func (o *V1NetworkPeersRouteFilterIDGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 network peers route filter Id get not found response has a 5xx status code
func (o *V1NetworkPeersRouteFilterIDGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 network peers route filter Id get not found response a status code equal to that given
func (o *V1NetworkPeersRouteFilterIDGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 network peers route filter Id get not found response
func (o *V1NetworkPeersRouteFilterIDGetNotFound) Code() int {
	return 404
}

func (o *V1NetworkPeersRouteFilterIDGetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetNotFound %s", 404, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetNotFound %s", 404, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1NetworkPeersRouteFilterIDGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1NetworkPeersRouteFilterIDGetConflict creates a V1NetworkPeersRouteFilterIDGetConflict with default headers values
func NewV1NetworkPeersRouteFilterIDGetConflict() *V1NetworkPeersRouteFilterIDGetConflict {
	return &V1NetworkPeersRouteFilterIDGetConflict{}
}

/*
V1NetworkPeersRouteFilterIDGetConflict describes a response with status code 409, with default header values.

Conflict
*/
type V1NetworkPeersRouteFilterIDGetConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 network peers route filter Id get conflict response has a 2xx status code
func (o *V1NetworkPeersRouteFilterIDGetConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 network peers route filter Id get conflict response has a 3xx status code
func (o *V1NetworkPeersRouteFilterIDGetConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 network peers route filter Id get conflict response has a 4xx status code
func (o *V1NetworkPeersRouteFilterIDGetConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 network peers route filter Id get conflict response has a 5xx status code
func (o *V1NetworkPeersRouteFilterIDGetConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 network peers route filter Id get conflict response a status code equal to that given
func (o *V1NetworkPeersRouteFilterIDGetConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the v1 network peers route filter Id get conflict response
func (o *V1NetworkPeersRouteFilterIDGetConflict) Code() int {
	return 409
}

func (o *V1NetworkPeersRouteFilterIDGetConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetConflict %s", 409, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetConflict %s", 409, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1NetworkPeersRouteFilterIDGetConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1NetworkPeersRouteFilterIDGetInternalServerError creates a V1NetworkPeersRouteFilterIDGetInternalServerError with default headers values
func NewV1NetworkPeersRouteFilterIDGetInternalServerError() *V1NetworkPeersRouteFilterIDGetInternalServerError {
	return &V1NetworkPeersRouteFilterIDGetInternalServerError{}
}

/*
V1NetworkPeersRouteFilterIDGetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1NetworkPeersRouteFilterIDGetInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 network peers route filter Id get internal server error response has a 2xx status code
func (o *V1NetworkPeersRouteFilterIDGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 network peers route filter Id get internal server error response has a 3xx status code
func (o *V1NetworkPeersRouteFilterIDGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 network peers route filter Id get internal server error response has a 4xx status code
func (o *V1NetworkPeersRouteFilterIDGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 network peers route filter Id get internal server error response has a 5xx status code
func (o *V1NetworkPeersRouteFilterIDGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 network peers route filter Id get internal server error response a status code equal to that given
func (o *V1NetworkPeersRouteFilterIDGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 network peers route filter Id get internal server error response
func (o *V1NetworkPeersRouteFilterIDGetInternalServerError) Code() int {
	return 500
}

func (o *V1NetworkPeersRouteFilterIDGetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetInternalServerError %s", 500, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-peers/{network_peer_id}/route-filters/{route_filter_id}][%d] v1NetworkPeersRouteFilterIdGetInternalServerError %s", 500, payload)
}

func (o *V1NetworkPeersRouteFilterIDGetInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1NetworkPeersRouteFilterIDGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
