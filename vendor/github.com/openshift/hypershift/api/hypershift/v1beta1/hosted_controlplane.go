package v1beta1

import (
	configv1 "github.com/openshift/api/config/v1"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

func init() {
	SchemeBuilder.Register(func(scheme *runtime.Scheme) error {
		scheme.AddKnownTypes(SchemeGroupVersion,
			&HostedControlPlane{},
			&HostedControlPlaneList{},
		)
		metav1.AddToGroupVersion(scheme, SchemeGroupVersion)
		return nil
	})
}

// HostedControlPlane defines the desired state of HostedControlPlane
// +genclient
// +kubebuilder:resource:path=hostedcontrolplanes,shortName=hcp;hcps,scope=Namespaced,categories=cluster-api
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:object:root=true
type HostedControlPlane struct {
	metav1.TypeMeta `json:",inline"`
	// metadata is the metadata for the HostedControlPlane.
	// +optional
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// spec is the specification for the HostedControlPlane.
	// +optional
	Spec HostedControlPlaneSpec `json:"spec,omitempty"`
	// status is the status of the HostedControlPlane.
	// +optional
	Status HostedControlPlaneStatus `json:"status,omitempty"`
}

// HostedControlPlaneSpec defines the desired state of HostedControlPlane
// +kubebuilder:validation:XValidation:rule="self.platform.type == 'IBMCloud' ? size(self.services) >= 3 : size(self.services) >= 4",message="spec.services in body should have at least 4 items or 3 for IBMCloud"
type HostedControlPlaneSpec struct {
	// releaseImage is the release image applied to the hosted control plane.
	// +required
	// +kubebuilder:validation:MaxLength=255
	ReleaseImage string `json:"releaseImage"`

	// controlPlaneReleaseImage specifies the desired OCP release payload for
	// control plane components running on the management cluster.
	// If not defined, ReleaseImage is used
	// +optional
	// +kubebuilder:validation:MaxLength=255
	ControlPlaneReleaseImage *string `json:"controlPlaneReleaseImage,omitempty"`

	// updateService may be used to specify the preferred upstream update service.
	// By default it will use the appropriate update service for the cluster and region.
	//
	// +optional
	UpdateService configv1.URL `json:"updateService,omitempty"`

	// channel is an identifier for explicitly requesting that a non-default
	// set of updates be applied to this cluster. The default channel will be
	// contain stable updates that are appropriate for production clusters.
	//
	// +optional
	// +kubebuilder:validation:MaxLength=255
	Channel string `json:"channel,omitempty"`

	// pullSecret is a reference to a secret containing the pull secret for the hosted control plane.
	// +required
	PullSecret corev1.LocalObjectReference `json:"pullSecret"`

	// issuerURL is an OIDC issuer URL which is used as the issuer in all
	// ServiceAccount tokens generated by the control plane API server. The
	// default value is kubernetes.default.svc, which only works for in-cluster
	// validation.
	// +required
	// +kubebuilder:validation:MaxLength=255
	IssuerURL string `json:"issuerURL"`

	// networking specifies network configuration for the cluster.
	// Temporarily optional for backward compatibility, required in future releases.
	// +optional
	Networking ClusterNetworking `json:"networking,omitempty"`

	// sshKey is a reference to a secret containing the SSH key for the hosted control plane.
	// +required
	SSHKey corev1.LocalObjectReference `json:"sshKey"`

	// clusterID is the unique id that identifies the cluster externally.
	// Making it optional here allows us to keep compatibility with previous
	// versions of the control-plane-operator that have no knowledge of this
	// field.
	// +optional
	// +kubebuilder:validation:MaxLength=255
	ClusterID string `json:"clusterID,omitempty"`

	// infraID is the unique id that identifies the cluster internally.
	// +required
	// +kubebuilder:validation:MaxLength=255
	InfraID string `json:"infraID"`

	// platform is the platform configuration for the cluster.
	// +required
	Platform PlatformSpec `json:"platform"`

	// dns is the DNS configuration for the cluster.
	// +required
	DNS DNSSpec `json:"dns"`

	// serviceAccountSigningKey is a reference to a secret containing the private key
	// used by the service account token issuer. The secret is expected to contain
	// a single key named "key". If not specified, a service account signing key will
	// be generated automatically for the cluster.
	//
	// +optional
	ServiceAccountSigningKey *corev1.LocalObjectReference `json:"serviceAccountSigningKey,omitempty"`

	// controllerAvailabilityPolicy specifies the availability policy applied to
	// critical control plane components. The default value is SingleReplica.
	//
	// +optional
	// +immutable
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="ControllerAvailabilityPolicy is immutable"
	// +kubebuilder:default:="HighlyAvailable"
	ControllerAvailabilityPolicy AvailabilityPolicy `json:"controllerAvailabilityPolicy,omitempty"`

	// infrastructureAvailabilityPolicy specifies the availability policy applied
	// to infrastructure services which run on cluster nodes. The default value is
	// SingleReplica.
	//
	// +optional
	// +kubebuilder:default:="SingleReplica"
	InfrastructureAvailabilityPolicy AvailabilityPolicy `json:"infrastructureAvailabilityPolicy,omitempty"`

	// fips specifies if the nodes for the cluster will be running in FIPS mode
	// +optional
	FIPS bool `json:"fips"`

	// kubeconfig specifies the name and key for the kubeconfig secret
	// +optional
	KubeConfig *KubeconfigSecretRef `json:"kubeconfig,omitempty"`

	// kubeAPIServerDNSName specifies a desired DNS name to resolve to the KAS.
	// When set, the controller will automatically generate a secret with kubeconfig and expose it in the hostedCluster Status.customKubeconfig field.
	// If it's set or removed day 2, the kubeconfig generated secret will be created, recreated or deleted.
	// The DNS entries should be resolvable from the cluster, so this should be manually configured in the DNS provider.
	// This field works in conjunction with configuration.APIServer.ServingCerts.NamedCertificates to enable
	// access to the API server via a custom domain name. The NamedCertificates provide the TLS certificates
	// for the custom domain, while this field triggers the generation of a kubeconfig that uses those certificates.
	//
	// +kubebuilder:validation:XValidation:rule=`self == "" || self.matches('^(?:(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}|[a-zA-Z0-9-]+)$')`,message="kubeAPIServerDNSName must be a valid URL name (e.g., api.example.com)"
	// +kubebuilder:validation:MaxLength=253
	// +kubebuilder:example: "api.example.com"
	// +optional
	KubeAPIServerDNSName string `json:"kubeAPIServerDNSName,omitempty"`

	// services defines metadata about how control plane services are published
	// in the management cluster.
	// +required
	// +kubebuilder:validation:MaxItems=6
	Services []ServicePublishingStrategyMapping `json:"services"`

	// auditWebhook contains metadata for configuring an audit webhook
	// endpoint for a cluster to process cluster audit events. It references
	// a secret that contains the webhook information for the audit webhook endpoint.
	// It is a secret because if the endpoint has MTLS the kubeconfig will contain client
	// keys. This is currently only supported in IBM Cloud. The kubeconfig needs to be stored
	// in the secret with a secret key name that corresponds to the constant AuditWebhookKubeconfigKey.
	// +optional
	AuditWebhook *corev1.LocalObjectReference `json:"auditWebhook,omitempty"`

	// etcd contains metadata about the etcd cluster the hypershift managed Openshift control plane components
	// use to store data.
	// +required
	Etcd EtcdSpec `json:"etcd"`

	// configuration embeds resources that correspond to the openshift configuration API:
	// https://docs.openshift.com/container-platform/4.7/rest_api/config_apis/config-apis-index.html
	// +optional
	Configuration *ClusterConfiguration `json:"configuration,omitempty"`

	// operatorConfiguration specifies configuration for individual OCP operators in the cluster.
	//
	// +optional
	// +openshift:enable:FeatureGate=ClusterVersionOperatorConfiguration
	OperatorConfiguration *OperatorConfiguration `json:"operatorConfiguration,omitempty"`

	// imageContentSources lists sources/repositories for the release-image content.
	// +optional
	// +kubebuilder:validation:MaxItems=25
	ImageContentSources []ImageContentSource `json:"imageContentSources,omitempty"`

	// additionalTrustBundle references a ConfigMap containing a PEM-encoded X.509 certificate bundle
	// +optional
	AdditionalTrustBundle *corev1.LocalObjectReference `json:"additionalTrustBundle,omitempty"`

	// secretEncryption contains metadata about the kubernetes secret encryption strategy being used for the
	// cluster when applicable.
	// +optional
	SecretEncryption *SecretEncryptionSpec `json:"secretEncryption,omitempty"`

	// pausedUntil is a field that can be used to pause reconciliation on a resource.
	// Either a date can be provided in RFC3339 format or a boolean. If a date is
	// provided: reconciliation is paused on the resource until that date. If the boolean true is
	// provided: reconciliation is paused on the resource until the field is removed.
	// +optional
	// +kubebuilder:validation:MaxLength=255
	PausedUntil *string `json:"pausedUntil,omitempty"`

	// olmCatalogPlacement specifies the placement of OLM catalog components. By default,
	// this is set to management and OLM catalog components are deployed onto the management
	// cluster. If set to guest, the OLM catalog components will be deployed onto the guest
	// cluster.
	//
	// +kubebuilder:default=management
	// +optional
	// +immutable
	OLMCatalogPlacement OLMCatalogPlacement `json:"olmCatalogPlacement,omitempty"`

	// autoscaling specifies auto-scaling behavior that applies to all NodePools
	// associated with the control plane.
	//
	// +optional
	Autoscaling ClusterAutoscaling `json:"autoscaling,omitempty"`

	// autoNode specifies the configuration for the autoNode feature.
	// +openshift:enable:FeatureGate=AutoNodeKarpenter
	// +optional
	AutoNode *AutoNode `json:"autoNode,omitempty"`

	// nodeSelector when specified, must be true for the pods managed by the HostedCluster to be scheduled.
	//
	// +optional
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`

	// tolerations when specified, define what custom tolerations are added to the hcp pods.
	//
	// +optional
	// +kubebuilder:validation:MaxItems=25
	Tolerations []corev1.Toleration `json:"tolerations,omitempty"`

	// labels when specified, define what custom labels are added to the hcp pods.
	// Changing this day 2 will cause a rollout of all hcp pods.
	// Duplicate keys are not supported. If duplicate keys are defined, only the last key/value pair is preserved.
	// Valid values are those in https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
	//
	// -kubebuilder:validation:XValidation:rule=`self.all(key, size(key) <= 317 && key.matches('^(([A-Za-z0-9]+(\\.[A-Za-z0-9]+)?)*[A-Za-z0-9]\\/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$'))`, message="label key must have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/)"
	// -kubebuilder:validation:XValidation:rule=`self.all(key, size(self[key]) <= 63 && self[key].matches('^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$'))`, message="label value must be 63 characters or less (can be empty), consist of alphanumeric characters, dashes (-), underscores (_) or dots (.), and begin and end with an alphanumeric character"
	// TODO: key/value validations break cost budget for <=4.17. We should figure why and enable it back.
	// +kubebuilder:validation:MaxProperties=20
	// +optional
	Labels map[string]string `json:"labels,omitempty"`

	// capabilities allows for disabling optional components at cluster install time.
	// This field is optional and once set cannot be changed.
	// +immutable
	// +optional
	// +kubebuilder:default={}
	// +kubebuilder:validation:XValidation:rule="self == oldSelf", message="Capabilities is immutable. Changes might result in unpredictable and disruptive behavior."
	Capabilities *Capabilities `json:"capabilities,omitempty"`
}

// availabilityPolicy specifies a high level availability policy for components.
// +kubebuilder:validation:Enum=HighlyAvailable;SingleReplica
type AvailabilityPolicy string

const (
	// HighlyAvailable means components should be resilient to problems across
	// fault boundaries as defined by the component to which the policy is
	// attached. This usually means running critical workloads with 3 replicas and
	// with little or no toleration of disruption of the component.
	HighlyAvailable AvailabilityPolicy = "HighlyAvailable"

	// SingleReplica means components are not expected to be resilient to problems
	// across most fault boundaries associated with high availability. This
	// usually means running critical workloads with just 1 replica and with
	// toleration of full disruption of the component.
	SingleReplica AvailabilityPolicy = "SingleReplica"
)

type KubeconfigSecretRef struct {
	// name is the name of the secret containing the kubeconfig.
	// +required
	// +kubebuilder:validation:MaxLength=255
	Name string `json:"name"`
	// key is the key in the secret containing the kubeconfig.
	// +required
	// +kubebuilder:validation:MaxLength=255
	Key string `json:"key"`
}

type ConditionType string

const (
	HostedControlPlaneAvailable ConditionType = "Available"
	HostedControlPlaneDegraded  ConditionType = "Degraded"
	EtcdSnapshotRestored        ConditionType = "EtcdSnapshotRestored"
	CVOScaledDown               ConditionType = "CVOScaledDown"
)

// HostedControlPlaneStatus defines the observed state of HostedControlPlane
type HostedControlPlaneStatus struct {
	// conditions contains details for one aspect of the current state of the HostedControlPlane.
	// Current condition types are: "Available"
	// +optional
	// +listType=map
	// +listMapKey=type
	// +patchMergeKey=type
	// +patchStrategy=merge
	// +kubebuilder:validation:MaxItems=100
	Conditions []metav1.Condition `json:"conditions,omitempty"`

	// ready denotes that the HostedControlPlane API Server is ready to
	// receive requests
	// This satisfies CAPI contract https://github.com/kubernetes-sigs/cluster-api/blob/cd3a694deac89d5ebeb888307deaa61487207aa0/controllers/cluster_controller_phases.go#L226-L230
	// +required
	// +kubebuilder:default=false
	Ready bool `json:"ready"`

	// initialized denotes whether or not the control plane has
	// provided a kubeadm-config.
	// Once this condition is marked true, its value is never changed. See the Ready condition for an indication of
	// the current readiness of the cluster's control plane.
	// This satisfies CAPI contract https://github.com/kubernetes-sigs/cluster-api/blob/cd3a694deac89d5ebeb888307deaa61487207aa0/controllers/cluster_controller_phases.go#L238-L252
	// +required
	// +kubebuilder:default=false
	Initialized bool `json:"initialized"`

	// externalManagedControlPlane indicates to cluster-api that the control plane
	// is managed by an external service.
	// https://github.com/kubernetes-sigs/cluster-api/blob/65e5385bffd71bf4aad3cf34a537f11b217c7fab/controllers/machine_controller.go#L468
	// +optional
	// +kubebuilder:default=true
	ExternalManagedControlPlane *bool `json:"externalManagedControlPlane,omitempty"`

	// controlPlaneEndpoint contains the endpoint information by which
	// external clients can access the control plane.  This is populated
	// after the infrastructure is ready.
	// +optional
	ControlPlaneEndpoint APIEndpoint `json:"controlPlaneEndpoint,omitempty"`

	// oauthCallbackURLTemplate contains a template for the URL to use as a callback
	// for identity providers. The [identity-provider-name] placeholder must be replaced
	// with the name of an identity provider defined on the HostedCluster.
	// This is populated after the infrastructure is ready.
	// +optional
	// +kubebuilder:validation:MaxLength=255
	OAuthCallbackURLTemplate string `json:"oauthCallbackURLTemplate,omitempty"`

	// versionStatus is the status of the release version applied by the
	// hosted control plane operator.
	// +optional
	VersionStatus *ClusterVersionStatus `json:"versionStatus,omitempty"`

	// version is the semantic version of the release applied by
	// the hosted control plane operator
	//
	// Deprecated: Use versionStatus.desired.version instead.
	// +optional
	// +kubebuilder:validation:MaxLength=255
	Version string `json:"version,omitempty"`

	// releaseImage is the release image applied to the hosted control plane.
	//
	// Deprecated: Use versionStatus.desired.image instead.
	// +optional
	// +kubebuilder:validation:MaxLength=255
	ReleaseImage string `json:"releaseImage,omitempty"`

	// lastReleaseImageTransitionTime is the time of the last update to the current
	// releaseImage property.
	//
	// Deprecated: Use versionStatus.history[0].startedTime instead.
	// +optional
	LastReleaseImageTransitionTime *metav1.Time `json:"lastReleaseImageTransitionTime,omitempty"`

	// kubeConfig is a reference to the secret containing the default kubeconfig
	// for this control plane.
	// +optional
	KubeConfig *KubeconfigSecretRef `json:"kubeConfig,omitempty"`

	// customKubeconfig references an external custom kubeconfig secret.
	// This field is populated in the status when a custom kubeconfig secret has been generated
	// for the hosted cluster. It contains the name and key of the secret located in the
	// hostedCluster namespace. This field is only populated when kubeApiExternalName is set.
	// If this field is removed during a day 2 operation, the referenced secret will be deleted
	// and this field will be removed from the hostedCluster status.
	// +optional
	CustomKubeconfig *KubeconfigSecretRef `json:"customKubeconfig,omitempty"`

	// kubeadminPassword is a reference to the secret containing the initial kubeadmin password
	// for the guest cluster.
	// +optional
	KubeadminPassword *corev1.LocalObjectReference `json:"kubeadminPassword,omitempty"`

	// platform contains platform-specific status of the HostedCluster
	// +optional
	Platform *PlatformStatus `json:"platform,omitempty"`

	// nodeCount tracks the number of nodes in the HostedControlPlane.
	// +optional
	NodeCount *int `json:"nodeCount,omitempty"`
}

// APIEndpoint represents a reachable Kubernetes API endpoint.
type APIEndpoint struct {
	// host is the hostname on which the API server is serving.
	// +required
	// +kubebuilder:validation:MaxLength=255
	Host string `json:"host"`

	// port is the port on which the API server is serving.
	// +required
	Port int32 `json:"port"`
}

// HostedControlPlaneList contains a list of HostedControlPlanes.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type HostedControlPlaneList struct {
	metav1.TypeMeta `json:",inline"`
	// metadata is the metadata for the HostedControlPlaneList.
	// +optional
	metav1.ListMeta `json:"metadata,omitempty"`
	// items is a list of HostedControlPlane.
	// +required
	// +kubebuilder:validation:MaxItems=100
	Items []HostedControlPlane `json:"items"`
}
